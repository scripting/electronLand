<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sat, 29 Jul 2023 15:42:57 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes http://drummer.scripting.com. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: electronLand</title>
		<dateCreated>Tue, 25 Apr 2017 15:25:56 GMT</dateCreated>
		<dateModified>Sat, 29 Jul 2023 15:42:57 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 4, 8, 25, 55, 59, 62, 63, 64, 66, 74, 80, 84, 86, 87, 88, 103, 104, 105, 108, 110, 112, 113, 114, 115, 117, 129, 136, 137, 138, 140, 141, 155, 200, 209, 224, 241, 244, 246, 264, 265, 287, 302, 307</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>45</windowTop>
		<windowLeft>904</windowLeft>
		<windowBottom>1080</windowBottom>
		<windowRight>2138</windowRight>
		</head>
	<body>
		<outline text="/fargo.io/code/shared/electronland2/">
			<outline text="worknotes.md" created="Sat, 27 Aug 2022 13:10:49 GMT">
				<outline text="#### 7/29/23 by DW" created="Sat, 29 Jul 2023 15:41:59 GMT">
					<outline text="Let the user specify the location of the userDataFolder for all upper-level code." created="Sat, 29 Jul 2023 15:34:48 GMT"/>
					<outline text="I want this so I can put the folder in Dropbox so it can be shared between systems." created="Sat, 29 Jul 2023 15:35:03 GMT"/>
					<outline text="Search for checkForRelocatedUserConfigFile." created="Sat, 29 Jul 2023 15:42:28 GMT"/>
					</outline>
				<outline text="#### 8/27/22 by DW" created="Sat, 27 Aug 2022 13:10:52 GMT">
					<outline text="Added config.flPreventHardwareAcceleration per Scott Hanson's &lt;a href=&quot;https://github.com/scripting/electronLand/issues/3#issue-1352977828&quot;&gt;request&lt;/a&gt;. " created="Sat, 27 Aug 2022 13:10:58 GMT"/>
					<outline text="Also added source.opml to the repository, which has become my convention -- it contains the outline that I edit the project in. " created="Sat, 27 Aug 2022 13:15:01 GMT"/>
					</outline>
				<outline text="#### 2/16/20 by DW">
					<outline text="Export shell.buildTabs so we can change the title of a tab from above. "/>
					</outline>
				<outline text="#### 1/31/20; by DW">
					<outline text="Fixed &lt;a href=&quot;https://www.electronjs.org/releases/stable?version=6&amp;page=5#release-notes-for-600&quot;&gt;breakage&lt;/a&gt; in shellNewFileDialog, shellChooseFolderDialog, shellOpenFileDialog."/>
					<outline text="Fixed some hard-coded icons used with Font-Awesome. Upgrading to the new version caused breakage. "/>
					</outline>
				<outline text="#### 12/27/17 by DW">
					<outline text="Made public along with the &lt;a href=&quot;https://github.com/scripting/Scripting-News/issues/55&quot;&gt;release&lt;/a&gt; of &lt;a href=&quot;https://github.com/scripting/electricPork&quot;&gt;electricPork&lt;/a&gt; as open source. The goal is to port electronLand to platforms other than the Mac. "/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;electronland&quot;,"/>
					<outline text="&quot;description&quot;: &quot;My container for Electron apps that use nodeStorage and Twitter for identity.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.5.6&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/electronland.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;main&quot;: &quot;electronland.js&quot;,"/>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;lib/electronmain.js&quot;, "/>
						<outline text="&quot;lib/electronshell.js&quot;,"/>
						<outline text="&quot;lib/electronshell.css&quot;,"/>
						<outline text="&quot;worknotes.md&quot;" created="Sat, 27 Aug 2022 13:14:17 GMT"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="lib/electronmain.js">
				<outline text="var myProductName = &quot;electronLand&quot;, myVersion = &quot;0.5.6&quot;;   " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="exports.init = init;"/>
				<outline text="exports.getConfig = function () { //8/5/17 by DW">
					<outline text="return (config);"/>
					<outline text="}"/>
					</outline>
				<outline text="exports.sendIpcToBrowser = sendIpcToBrowser; //8/5/17 by DW"/>
				<outline text="exports.debugMessage = debugMessage; //8/8/17 by DW"/>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;);  "/>
				<outline text="const http = require (&quot;http&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const urlpack = require (&quot;url&quot;);"/>
				<outline text="const electron = require (&quot;electron&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text=""/>
				<outline text="var mainWindow = null; "/>
				<outline text="var flOpenUrlsInExternalBrowser = true, urlMainWindow; "/>
				<outline text="var bullMancuso = undefined;"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="indexfilename: &quot;index.html&quot;, "/>
					<outline text="acceptableFileExtensions: [&quot;txt&quot;, &quot;js&quot;, &quot;xml&quot;, &quot;html&quot;],"/>
					<outline text="userDataFolder: undefined,"/>
					<outline text="nameUserDataFolder: &quot;data&quot;,"/>
					<outline text="flOpenDevToolsAtStart: false,"/>
					<outline text="flPreventAppSuspension: false,"/>
					<outline text="mainWindowWidth: 1100,"/>
					<outline text="mainWindowHeight: 1000,"/>
					<outline text="iconPath: &quot;app.png&quot;,"/>
					<outline text="urlTwitterServer: &quot;http://twitter.porkchop.io/&quot;,"/>
					<outline text="oauthWaitPort: 1403,"/>
					<outline text="asyncMessageCallback: undefined, //8/8/17 by DW"/>
					<outline text="flPreventHardwareAcceleration: false //8/27/22 by DW" created="Sat, 27 Aug 2022 13:10:36 GMT"/>
					<outline text="};"/>
					</outline>
				<outline text="var fnameConfig = &quot;config.json&quot;;"/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="ctStarts: 0,"/>
					<outline text="ctSeconds: 0,"/>
					<outline text="ctStatsWrites: 0,"/>
					<outline text="ctScriptRuns: 0,"/>
					<outline text="whenLastScriptRun: undefined"/>
					<outline text="};"/>
					</outline>
				<outline text="var fnameStats = &quot;stats.json&quot;, flStatsChanged = false;"/>
				<outline text=""/>
				<outline text="var localStorage = {">
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text="function sendIpcToBrowser (name, value) { //8/5/17 by DW">
					<outline text="Changes" isComment="true">
						<outline text="8/5/17; 12:31:23 PM by DW">
							<outline text="Created. Can be used to send IPC messages from the main thread to the browser."/>
							</outline>
						</outline>
					<outline text="console.log (&quot;sendIpcToBrowser: name == &quot; + name);" isComment="true"/>
					<outline text="if (bullMancuso !== undefined) {">
						<outline text="console.log (&quot;sendIpcToBrowser: bullMancuso !== undefined&quot;);" isComment="true"/>
						<outline text="bullMancuso.send (&quot;electronland&quot;, name, value);"/>
						<outline text="return (true);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="console.log (&quot;sendIpcToBrowser: bullMancuso === undefined&quot;);" isComment="true"/>
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function debugMessage (s) {">
					<outline text="Changes" isComment="true">
						<outline text="3/11/17; 10:56:23 AM by DW">
							<outline text="Send the message in a try in case the window on the other side is closed."/>
							</outline>
						</outline>
					<outline text="console.log (s);"/>
					<outline text="try {">
						<outline text="if (bullMancuso !== undefined) {">
							<outline text="bullMancuso.send (&quot;debugMessage&quot;, s);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="catch (err) {">
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function statsChanged () {">
					<outline text="flStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function fsSureFilePathSync (path) { " isComment="true">
					<outline text="var splits = path.split (&quot;/&quot;);"/>
					<outline text="path = &quot;&quot;; "/>
					<outline text="if (splits.length &gt; 0) {">
						<outline text="function doLevel (levelnum) {">
							<outline text="if (levelnum &lt; (splits.length - 1)) {">
								<outline text="path += splits [levelnum] + &quot;/&quot;;"/>
								<outline text="if (fs.existsSync (path)) {">
									<outline text="doLevel (levelnum + 1);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="fs.mkdirSync (path, undefined);"/>
									<outline text="doLevel (levelnum + 1);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="doLevel (0);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (true);"/>
					<outline text="}"/>
					</outline>
				<outline text="function fsSureFilePath (path, callback) { " isComment="true">
					<outline text="var splits = path.split (&quot;/&quot;);"/>
					<outline text="path = &quot;&quot;; //1/8/15 by DW"/>
					<outline text="if (splits.length &gt; 0) {">
						<outline text="function doLevel (levelnum) {">
							<outline text="if (levelnum &lt; (splits.length - 1)) {">
								<outline text="path += splits [levelnum] + &quot;/&quot;;"/>
								<outline text="fs.exists (path, function (flExists) {">
									<outline text="if (flExists) {">
										<outline text="doLevel (levelnum + 1);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="fs.mkdir (path, undefined, function () {">
											<outline text="doLevel (levelnum + 1);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (callback != undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="doLevel (0);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="if (callback != undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function fsSureFolder (folder, callback) {" isComment="true">
					<outline text="utils.sureFilePath (folder + &quot;x&quot;, callback);"/>
					<outline text="return (folder);"/>
					<outline text="}"/>
					</outline>
				<outline text="function fsIsFolder (path) {" isComment="true">
					<outline text="return (fs.statSync (path).isDirectory ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function getLocalFilePath (relpath) {">
					<outline text="return (config.userDataFolder + relpath);"/>
					<outline text="}"/>
					</outline>
				<outline text="function writeUserDataFile (path, config) {">
					<outline text="var f = getLocalFilePath (path);"/>
					<outline text="debugMessage (&quot;writeUserDataFile: f == &quot; + f);" isComment="true"/>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="fs.writeFile (f, utils.jsonStringify (config), function (err) {">
							<outline text="if (err) {">
								<outline text="debugMessage (&quot;writeUserDataFile: error writing file &quot; + f + &quot; == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readUserDataFile (path, config, callback) {">
					<outline text="var f = getLocalFilePath (path);"/>
					<outline text="console.log (&quot;readUserDataFile: f == &quot; + f); //7/29/23 by DW"/>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="debugMessage (&quot;readUserDataFile: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function sureConfigJson (callback) { //4/18/17 by DW">
					<outline text="Changes" isComment="true">
						<outline text="8/6/17; 10:57:30 AM by DW">
							<outline text="Commented out the setting of xxx. I think we just want to have an empty place where the user can override our preferences, but the idea of putting default values there is a bad one. It lost me 1/2 day trying to figure out where config.flOpenDevToolsAtStart was being turned off. And I'm supposed to know how all this fits together! ;-)"/>
							</outline>
						<outline text="4/18/17; 10:25:43 AM by DW">
							<outline text="Create a config.json file with some basic values if one doesn't exist, so a user has a place to start, and an example to follow. "/>
							</outline>
						</outline>
					<outline text="var f = getLocalFilePath (fnameConfig);"/>
					<outline text="var initConfig = {">
						<outline text="flOpenDevToolsAtStart: config.flOpenDevToolsAtStart" isComment="true"/>
						<outline text="};"/>
						</outline>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="try {">
									<outline text="fs.writeFile (f, utils.jsonStringify (initConfig), function (err) {">
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="debugMessage (&quot;sureConfigJson: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateConfigJson (theConfigSubset, callback) { //4/21/17 by DW">
					<outline text="var f = getLocalFilePath (fnameConfig);"/>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="var theFullConfig = new Object ();"/>
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="theFullConfig = JSON.parse (data.toString ());"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="for (var x in theConfigSubset) {">
								<outline text="theFullConfig [x] = theConfigSubset [x]; "/>
								<outline text="}"/>
								</outline>
							<outline text="fs.writeFile (f, utils.jsonStringify (theFullConfig), function (err) {">
								<outline text="});"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readConfig (f, config, callback) {">
					<outline text="console.log (&quot;readConfig: f == &quot; + f); "/>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="console.log (utils.jsonStringify (jstruct)); "/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="debugMessage (&quot;readConfig: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function runUserScript (s, scriptName) {">
					<outline text="Changes" isComment="true">
						<outline text="11/25/14; 11:17:02 AM by DW">
							<outline text="The central place to run a script. The scriptName param is just used in the error message, so we can tell the user where the script came from."/>
							</outline>
						</outline>
					<outline text="var now = new Date ();"/>
					<outline text="function msg (s) {">
						<outline text="var package = {">
							<outline text="text: s,"/>
							<outline text="path: scriptName"/>
							<outline text="};"/>
							</outline>
						<outline text="bullMancuso.send (&quot;callback&quot;, &quot;msg&quot;, utils.jsonStringify (package));"/>
						<outline text="}"/>
						</outline>
					<outline text="function persist (objectName) {">
						<outline text="if (localStorage [objectName] === undefined) {">
							<outline text="localStorage [objectName] = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="return (localStorage [objectName]);"/>
						<outline text="}"/>
						</outline>
					<outline text="var number = {" created="Thu, 25 Jul 2013 22:23:59 GMT" pgfnum="28289">
						<outline text="random: function (lower, upper) {" created="Thu, 25 Jul 2013 22:24:10 GMT" pgfnum="28291">
							<outline text="return (utils.random (lower, upper));" created="Thu, 25 Jul 2013 22:24:40 GMT" pgfnum="28293"/>
							<outline text="}" created="Thu, 25 Jul 2013 22:24:29 GMT" pgfnum="28292"/>
							</outline>
						<outline text="}" created="Thu, 25 Jul 2013 22:24:03 GMT" pgfnum="28290"/>
						</outline>
					<outline text="var file = {" created="Wed, 24 Jul 2013 14:43:17 GMT" pgfnum="28184">
						<outline text="readWholeFile: function (path) {" created="Fri, 26 Jul 2013 15:11:05 GMT" pgfnum="28305">
							<outline text="return (fs.readFileSync (path).toString ());"/>
							<outline text="}," created="Fri, 26 Jul 2013 15:11:22 GMT" pgfnum="28308"/>
							</outline>
						<outline text="writeWholeFile: function (path, data) {" created="Wed, 24 Jul 2013 14:43:29 GMT" pgfnum="28186">
							<outline text="return (fs.writeFileSync (path, data));"/>
							<outline text="}," created="Wed, 24 Jul 2013 14:43:47 GMT" pgfnum="28187"/>
							</outline>
						<outline text="exists: function (path) {">
							<outline text="return (fs.existsSync (path));"/>
							<outline text="},"/>
							</outline>
						<outline text="getDatePath: function (theDate, flLastSeparator) {" created="Wed, 24 Jul 2013 15:22:40 GMT" pgfnum="28194">
							<outline text="return (utils.getDatePath (theDate, flLastSeparator));"/>
							<outline text="}," created="Wed, 24 Jul 2013 15:23:09 GMT" pgfnum="28195"/>
							</outline>
						<outline text="sureFilePath: function (path) {">
							<outline text="return (utils.sureFilePathSync (path));"/>
							<outline text="},"/>
							</outline>
						<outline text="copy: function (source, dest) {">
							<outline text="return (file.writeWholeFile (dest, file.readWholeFile (source)));"/>
							<outline text="},"/>
							</outline>
						<outline text="isFolder: function (path) {">
							<outline text="return (fs.statSync (path).isDirectory ());"/>
							<outline text="},"/>
							</outline>
						<outline text="getFileList: function (folderpath) {">
							<outline text="return (fs.readdirSync (folderpath));"/>
							<outline text="},"/>
							</outline>
						<outline text="getPathChar: function () {">
							<outline text="return (&quot;/&quot;); //must be made cross-platform -- 2/17/17 by DW"/>
							<outline text="},"/>
							</outline>
						<outline text="fileFromPath: function (f) {">
							<outline text="return (string.lastField (f, file.getPathChar ()));"/>
							<outline text="},"/>
							</outline>
						<outline text="newFolder: function (path) {">
							<outline text="return (fs.mkdirSync (path));"/>
							<outline text="},"/>
							</outline>
						<outline text="folderFromPath: function (f) {">
							<outline text="var pc = file.getPathChar ();"/>
							<outline text="return (string.popLastField (f, pc) + pc);"/>
							<outline text="},"/>
							</outline>
						<outline text="getUserDataFolder: function () {">
							<outline text="return (appConsts.userDataFolder + &quot;/&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="getCurrentFilePath: function () {" isComment="true" created="Wed, 24 Jul 2013 15:59:33 GMT" pgfnum="28207">
							<outline text="var tab = appPrefs.myTabs [appPrefs.ixCurrentTab];"/>
							<outline text="return (appConsts.outlinesPath + tab.fname);"/>
							<outline text="}," created="Wed, 24 Jul 2013 15:59:56 GMT" pgfnum="28208"/>
							</outline>
						<outline text="getCurrentFileTitle: function () {" isComment="true" created="Wed, 24 Jul 2013 15:59:33 GMT" pgfnum="28207">
							<outline text="var tab = appPrefs.myTabs [appPrefs.ixCurrentTab];"/>
							<outline text="return (tab.name);"/>
							<outline text="}," created="Wed, 24 Jul 2013 15:59:56 GMT" pgfnum="28208"/>
							</outline>
						<outline text="getCurrentFileInfo: function () { //1/15/17 by DW" isComment="true" created="Wed, 24 Jul 2013 15:59:33 GMT" pgfnum="28207">
							<outline text="return (appPrefs.myTabs [appPrefs.ixCurrentTab]);"/>
							<outline text="}," created="Wed, 24 Jul 2013 15:59:56 GMT" pgfnum="28208"/>
							</outline>
						<outline text="viewCurrentFileInReader: function () { //7/28/13 by DW" isComment="true" created="Sun, 28 Jul 2013 18:18:31 GMT" pgfnum="28356">
							<outline text="file.makeFileViewable (function (theUrl) {">
								<outline text="if (theUrl === undefined) {">
									<outline text="dialog.alert (&quot;Can't open the file in the reader, possibly because it's not public.&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="webBrowser.openUrl (theUrl);"/>
									<outline text="}"/>
									</outline>
								<outline text="})"/>
								</outline>
							<outline text="openInTacoPie ();" isComment="true" created="Sun, 28 Jul 2013 18:19:35 GMT" pgfnum="28358"/>
							<outline text="}," created="Sun, 28 Jul 2013 18:18:46 GMT" pgfnum="28357"/>
							</outline>
						<outline text="saveCurrentFileAsMarkdown: function () { //7/28/13 by DW" isComment="true" created="Sun, 28 Jul 2013 18:18:31 GMT" pgfnum="28356">
							<outline text="fileSaveAsMarkdownCommand ();" created="Sun, 28 Jul 2013 18:19:35 GMT" pgfnum="28358"/>
							<outline text="}," created="Sun, 28 Jul 2013 18:18:46 GMT" pgfnum="28357"/>
							</outline>
						<outline text="makeFilePublic: function (callback) { //1/15/17 by DW" isComment="true" created="Wed, 24 Jul 2013 15:47:38 GMT" pgfnum="28204">
							<outline text="makeFilePublic (callback);"/>
							<outline text="}," created="Wed, 24 Jul 2013 15:47:47 GMT" pgfnum="28205"/>
							</outline>
						<outline text="getPublicUrl: function () { //1/17/17 by DW" isComment="true" created="Wed, 24 Jul 2013 15:47:38 GMT" pgfnum="28204">
							<outline text="var theTab = appPrefs.myTabs [appPrefs.ixCurrentTab];"/>
							<outline text="return (theTab.urlPublic);"/>
							<outline text="}," created="Wed, 24 Jul 2013 15:47:47 GMT" pgfnum="28205"/>
							</outline>
						<outline text="makeFileViewable: function (callback) { //1/15/17 by DW" isComment="true" created="Wed, 24 Jul 2013 15:47:38 GMT" pgfnum="28204">
							<outline text="makeFileViewable (callback);"/>
							<outline text="}," created="Wed, 24 Jul 2013 15:47:47 GMT" pgfnum="28205"/>
							</outline>
						<outline text="getFileList: function (callback) { //1/16/17 by DW" isComment="true" created="Wed, 24 Jul 2013 15:22:40 GMT" pgfnum="28194">
							<outline text="twGetUserFiles (true, function (privateFiles) {">
								<outline text="twGetUserFiles (false, function (publicFiles) {">
									<outline text="function addFiles (whichFiles) {">
										<outline text="for (var i = 0; i &lt; whichFiles.length; i++) {">
											<outline text="var theFile = whichFiles [i];"/>
											<outline text="theFiles [theFiles.length] = theFile.path;"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="var theFiles = new Array ();"/>
									<outline text="addFiles (publicFiles);"/>
									<outline text="addFiles (privateFiles);"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (theFiles);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Wed, 24 Jul 2013 15:23:09 GMT" pgfnum="28195"/>
							</outline>
						<outline text="}" created="Wed, 24 Jul 2013 14:43:21 GMT" pgfnum="28185"/>
						</outline>
					<outline text="var http = {" created="Sat, 27 Jul 2013 14:57:38 GMT" pgfnum="28339">
						<outline text="readUrl: function (url, callback) {" created="Sat, 27 Jul 2013 14:57:41 GMT" pgfnum="28340">
							<outline text="request (url, function (err, response, body) {">
								<outline text="if (callback !== undefined) {">
									<outline text="if (err) {">
										<outline text="callback (undefined);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (body.toString ());"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Sat, 27 Jul 2013 14:58:21 GMT" pgfnum="28341"/>
							</outline>
						<outline text="}" created="Sat, 27 Jul 2013 14:58:23 GMT" pgfnum="28342"/>
						</outline>
					<outline text="var s3 = {" created="Sat, 27 Jul 2013 14:57:38 GMT" pgfnum="28339">
						<outline text="newObject: function (path, text, type, callback) {" created="Sat, 27 Jul 2013 14:57:41 GMT" pgfnum="28340">
							<outline text="var s = text.toString ();"/>
							<outline text="s3Lib.newObject (path, s, type, undefined, function (err, data) {" created="Wed, 22 Jan 2014 22:41:22 GMT" pgfnum="36396">
								<outline text="if (callback !== undefined) {" created="Fri, 24 Jan 2014 22:31:50 GMT" pgfnum="36543">
									<outline text="callback (err, data);" created="Wed, 22 Jan 2014 23:26:59 GMT" pgfnum="36420"/>
									<outline text="}" created="Fri, 24 Jan 2014 22:32:01 GMT" pgfnum="36544"/>
									</outline>
								<outline text="});" created="Wed, 22 Jan 2014 23:26:37 GMT" pgfnum="36418"/>
								</outline>
							<outline text="}," created="Sat, 27 Jul 2013 14:58:21 GMT" pgfnum="28341"/>
							</outline>
						<outline text="getObject: function (path, callback) {">
							<outline text="s3Lib.getObject (path, function (err, data) {">
								<outline text="if (callback !== undefined) {">
									<outline text="if (err) {">
										<outline text="callback (undefined, err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (data);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}" created="Sat, 27 Jul 2013 14:58:23 GMT" pgfnum="28342"/>
						</outline>
					<outline text="var string = {" created="Wed, 24 Jul 2013 15:16:45 GMT" pgfnum="28189">
						<outline text="beginsWith: utils.beginsWith," created="Wed, 27 Nov 2013 21:58:15 GMT" pgfnum="32470"/>
						<outline text="contains: utils.stringContains," created="Wed, 27 Nov 2013 22:17:29 GMT" pgfnum="32497"/>
						<outline text="countFields: utils.stringCountFields," created="Thu, 25 Jul 2013 21:49:37 GMT" pgfnum="28268"/>
						<outline text="dayOfWeekToString: utils.dayOfWeekToString," created="Thu, 25 Jul 2013 22:21:27 GMT" pgfnum="28286"/>
						<outline text="delete: utils.stringDelete,"/>
						<outline text="endsWith: utils.endsWith," created="Wed, 27 Nov 2013 21:58:15 GMT" pgfnum="32470"/>
						<outline text="filledString: utils.filledString," created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252"/>
						<outline text="getRandomPassword: utils.getRandomPassword," created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252"/>
						<outline text="getRandomSnarkySlogan: utils.getRandomSnarkySlogan,"/>
						<outline text="hashMD5: function (s) {" created="Mon, 05 Aug 2013 18:05:25 GMT" pgfnum="28802">
							<outline text="return (crypto.createHash (&quot;md5&quot;).update (s).digest (&quot;hex&quot;));"/>
							<outline text="}," created="Mon, 05 Aug 2013 18:05:32 GMT" pgfnum="28803"/>
							</outline>
						<outline text="innerCaseName: utils.innerCaseName," created="Wed, 24 Jul 2013 15:16:51 GMT" pgfnum="28191"/>
						<outline text="insert: function (source, dest, ix) {" created="Wed, 27 Nov 2013 01:55:32 GMT" pgfnum="32381">
							<outline text="ix--; //our version is 1-based"/>
							<outline text="return (dest.substr (0, ix) + source + dest.substr (ix));" created="Wed, 27 Nov 2013 01:57:49 GMT" pgfnum="32387"/>
							<outline text="},"/>
							</outline>
						<outline text="isAlpha: utils.isAlpha," created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252"/>
						<outline text="isNumeric: utils.isNumeric," created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252"/>
						<outline text="lastField: utils.stringLastField," created="Wed, 20 Nov 2013 14:18:54 GMT" pgfnum="31820"/>
						<outline text="lower: utils.stringLower," created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252"/>
						<outline text="mid: utils.stringMid," created="Thu, 25 Jul 2013 22:00:45 GMT" pgfnum="28278"/>
						<outline text="monthToString: utils.monthToString, //January, February etc." created="Wed, 24 Jul 2013 20:46:12 GMT" pgfnum="28249"/>
						<outline text="multipleReplaceAll: utils.multipleReplaceAll, //1/18/17 by DW"/>
						<outline text="nthField: utils.stringNthField,"/>
						<outline text="padWithZeros: utils.padWithZeros," created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252"/>
						<outline text="popExtension: utils.stringPopExtension, //1/18/17 by DW"/>
						<outline text="popLastField: utils.stringPopLastField," created="Tue, 03 Dec 2013 17:49:28 GMT" pgfnum="32988"/>
						<outline text="popTrailing: function (s, ch) { //11/25/13 by DW" created="Mon, 25 Nov 2013 15:58:27 GMT" pgfnum="32237">
							<outline text="while (s.length &gt; 0) {" created="Mon, 25 Nov 2013 15:44:37 GMT" pgfnum="32226">
								<outline text="if (s [s.length - 1] != ch) {" created="Mon, 25 Nov 2013 15:44:50 GMT" pgfnum="32230">
									<outline text="break;" created="Mon, 25 Nov 2013 15:47:23 GMT" pgfnum="32236"/>
									<outline text="}" created="Mon, 25 Nov 2013 15:45:06 GMT" pgfnum="32231"/>
									</outline>
								<outline text="s = string.delete (s, s.length, 1);" created="Mon, 25 Nov 2013 15:45:28 GMT" pgfnum="32235"/>
								<outline text="}" created="Mon, 25 Nov 2013 15:44:47 GMT" pgfnum="32229"/>
								</outline>
							<outline text="return (s);" created="Mon, 25 Nov 2013 15:44:37 GMT" pgfnum="32228"/>
							<outline text="}," created="Mon, 25 Nov 2013 15:58:46 GMT" pgfnum="32238"/>
							</outline>
						<outline text="replaceAll: utils.replaceAll," created="Sat, 27 Jul 2013 18:16:06 GMT" pgfnum="28354"/>
						<outline text="stripMarkup: utils.stripMarkup," created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252"/>
						<outline text="trimLeading: function (s, ch) {" created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252">
							<outline text="if (ch == undefined) {" created="Thu, 25 Jul 2013 22:12:45 GMT" pgfnum="28280">
								<outline text="ch = &quot; &quot;;" created="Thu, 25 Jul 2013 22:12:50 GMT" pgfnum="28281"/>
								<outline text="}" created="Thu, 25 Jul 2013 22:12:53 GMT" pgfnum="28282"/>
								</outline>
							<outline text="return (utils.trimLeading (s, ch));" created="Wed, 24 Jul 2013 20:51:48 GMT" pgfnum="28256"/>
							<outline text="}," created="Wed, 24 Jul 2013 20:47:33 GMT" pgfnum="28253"/>
							</outline>
						<outline text="trimTrailing: function (s, ch) {" created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252">
							<outline text="if (ch == undefined) {" created="Thu, 25 Jul 2013 22:12:45 GMT" pgfnum="28280">
								<outline text="ch = &quot; &quot;;" created="Thu, 25 Jul 2013 22:12:50 GMT" pgfnum="28281"/>
								<outline text="}" created="Thu, 25 Jul 2013 22:12:53 GMT" pgfnum="28282"/>
								</outline>
							<outline text="return (utils.trimTrailing (s, ch));" created="Wed, 24 Jul 2013 20:51:48 GMT" pgfnum="28256"/>
							<outline text="}," created="Wed, 24 Jul 2013 20:47:33 GMT" pgfnum="28253"/>
							</outline>
						<outline text="trimWhitespace: utils.trimWhitespace," created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252"/>
						<outline text="upper: utils.stringUpper" created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252"/>
						<outline text="}" created="Wed, 24 Jul 2013 15:16:49 GMT" pgfnum="28190"/>
						</outline>
					<outline text="var dialog = {" created="Wed, 17 Jul 2013 02:42:52 GMT" pgfnum="27970">
						<outline text="alert: function (s) {">
							<outline text="var package = {">
								<outline text="text: s,"/>
								<outline text="path: scriptName"/>
								<outline text="};"/>
								</outline>
							<outline text="bullMancuso.send (&quot;callback&quot;, &quot;alertDialog&quot;, utils.jsonStringify (package));"/>
							<outline text="},"/>
							</outline>
						<outline text="ask: function (prompt, defaultValue, placeholder, callback) {" created="Mon, 22 Jul 2013 23:06:21 GMT" pgfnum="28159">
							<outline text=""/>
							<outline text=""/>
							<outline text="bullMancuso.send (&quot;askDialog&quot;, prompt, defaultValue, placeholder, callback);"/>
							<outline text=""/>
							<outline text=""/>
							<outline text="return (askDialog (prompt, defaultValue, placeholder, callback));" isComment="true" created="Mon, 22 Jul 2013 23:06:44 GMT" pgfnum="28160"/>
							<outline text="}" created="Mon, 22 Jul 2013 23:07:25 GMT" pgfnum="28161"/>
							</outline>
						<outline text="viewText: function (prompt, s) {" isComment="true" created="Fri, 26 Jul 2013 18:03:07 GMT" pgfnum="28331">
							<outline text="showViewTextDialog (prompt, s);" created="Fri, 26 Jul 2013 18:03:14 GMT" pgfnum="28332"/>
							<outline text="}," created="Fri, 26 Jul 2013 18:03:17 GMT" pgfnum="28333"/>
							</outline>
						<outline text="confirm: function (prompt, callback) {" isComment="true" created="Wed, 24 Jul 2013 13:54:39 GMT" pgfnum="28167">
							<outline text="confirmDialog (prompt, callback);" created="Wed, 24 Jul 2013 13:57:08 GMT" pgfnum="28169"/>
							<outline text="}," created="Wed, 24 Jul 2013 13:54:53 GMT" pgfnum="28168"/>
							</outline>
						<outline text="about: function (urlOpml) {" isComment="true" created="Mon, 19 Aug 2013 23:33:47 GMT" pgfnum="29251">
							<outline text="aboutDialogShow (urlOpml);" created="Mon, 19 Aug 2013 23:34:11 GMT" pgfnum="29253"/>
							<outline text="}" created="Mon, 19 Aug 2013 23:33:56 GMT" pgfnum="29252"/>
							</outline>
						<outline text="}" created="Wed, 17 Jul 2013 02:42:59 GMT" pgfnum="27971"/>
						</outline>
					<outline text="var date = {" created="Tue, 17 Dec 2013 21:05:27 GMT" pgfnum="33818">
						<outline text="netStandardString: function (theDate) { //12/17/13 by DW" created="Tue, 17 Dec 2013 21:05:39 GMT" pgfnum="33820">
							<outline text="return (theDate.toUTCString ());" created="Tue, 17 Dec 2013 21:06:29 GMT" pgfnum="33825"/>
							<outline text="}," created="Tue, 17 Dec 2013 21:06:23 GMT" pgfnum="33824"/>
							</outline>
						<outline text="secondsSince: utils.secondsSince"/>
						<outline text="}" created="Tue, 17 Dec 2013 21:05:31 GMT" pgfnum="33819"/>
						</outline>
					<outline text="var clock = {" created="Mon, 22 Jul 2013 17:10:59 GMT" pgfnum="28081">
						<outline text="now: function () {" created="Mon, 22 Jul 2013 17:11:12 GMT" pgfnum="28083">
							<outline text="return (new Date ());" created="Mon, 22 Jul 2013 17:11:27 GMT" pgfnum="28085"/>
							<outline text="}," created="Mon, 22 Jul 2013 17:11:23 GMT" pgfnum="28084"/>
							</outline>
						<outline text="waitSeconds: function (ctsecs) {" created="Mon, 22 Jul 2013 17:12:11 GMT" pgfnum="28086">
							<outline text=""/>
							<outline text="return (sleep (ctsecs * 1000));"/>
							<outline text=""/>
							<outline text="var ctloops = 0;" isComment="true" created="Mon, 22 Jul 2013 17:12:32 GMT" pgfnum="28088"/>
							<outline text="for (var whenStart = new Date (); utils.secondsSince (whenStart) &lt; ctsecs; ctloops) {" isComment="true" created="Mon, 22 Jul 2013 17:13:31 GMT" pgfnum="28090">
								<outline text="debugMessage (utils.secondsSince (whenStart));"/>
								<outline text="ctloops++;" created="Mon, 22 Jul 2013 17:15:12 GMT" pgfnum="28092"/>
								<outline text="}" created="Mon, 22 Jul 2013 17:14:19 GMT" pgfnum="28091"/>
								</outline>
							<outline text="return (ctloops);" isComment="true" created="Mon, 22 Jul 2013 17:18:12 GMT" pgfnum="28093"/>
							<outline text="}" created="Mon, 22 Jul 2013 17:12:23 GMT" pgfnum="28087"/>
							</outline>
						<outline text="}" created="Mon, 22 Jul 2013 17:11:06 GMT" pgfnum="28082"/>
						</outline>
					<outline text="var speaker = {" created="Tue, 23 Jul 2013 12:54:38 GMT" pgfnum="28162">
						<outline text="beep: function () {" created="Tue, 23 Jul 2013 12:54:43 GMT" pgfnum="28163">
							<outline text="debugMessage (&quot;runUserScript: speaker.beep ()&quot;);"/>
							<outline text="bullMancuso.send (&quot;callback&quot;, &quot;speakerBeep&quot;, utils.jsonStringify ({}));"/>
							<outline text="}" created="Tue, 23 Jul 2013 12:54:50 GMT" pgfnum="28164"/>
							</outline>
						<outline text="}" created="Tue, 23 Jul 2013 12:54:52 GMT" pgfnum="28165"/>
						</outline>
					<outline text="var webBrowser = { " created="Tue, 23 Jul 2013 12:54:38 GMT" pgfnum="28162">
						<outline text="openUrl: function (url) {" created="Tue, 23 Jul 2013 12:54:43 GMT" pgfnum="28163">
							<outline text="electron.shell.openExternal (url); //5/10/17 by DW"/>
							<outline text="}" created="Tue, 23 Jul 2013 12:54:50 GMT" pgfnum="28164"/>
							</outline>
						<outline text="}" created="Tue, 23 Jul 2013 12:54:52 GMT" pgfnum="28165"/>
						</outline>
					<outline text="var twitter = { " created="Tue, 23 Jul 2013 12:54:38 GMT" pgfnum="28162">
						<outline text="getMyName: function (callback) {">
							<outline text="return (twitterLib.getScreenName (callback));"/>
							<outline text="},"/>
							</outline>
						<outline text="tweet: function (theTweet, callback) {">
							<outline text="return (twitterLib.tweet (theTweet, undefined, debugMessage, callback));"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text=""/>
						<outline text=""/>
						<outline text="getUserTweets: function (userId, callback) {" isComment="true" created="Tue, 23 Jul 2013 12:54:43 GMT" pgfnum="28163">
							<outline text="var idLastSeen = undefined;"/>
							<outline text="twGetUserInfo (userId, function (userinfo) {">
								<outline text="twGetUserTweets (userinfo.id_str, idLastSeen, function (theTweets) {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback (theTweets);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}," created="Tue, 23 Jul 2013 12:54:50 GMT" pgfnum="28164"/>
							</outline>
						<outline text="post: function (status, callback) {" isComment="true">
							<outline text="twTweet (status, 0, function (data) {" created="Thu, 24 Apr 2014 12:39:56 GMT" pgfnum="40455">
								<outline text="if (callback !== undefined) {">
									<outline text="callback (data);"/>
									<outline text="}"/>
									</outline>
								<outline text="});" created="Thu, 24 Apr 2014 12:49:28 GMT" pgfnum="40461"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}" created="Tue, 23 Jul 2013 12:54:52 GMT" pgfnum="28165"/>
						</outline>
					<outline text="var fargo = { //11/29/13 by DW" created="Fri, 29 Nov 2013 15:53:58 GMT" pgfnum="32566">
						<outline text="version: function () {" created="Tue, 23 Jul 2013 12:54:43 GMT" pgfnum="28163">
							<outline text="return (appConsts.version);" created="Tue, 23 Jul 2013 12:55:15 GMT" pgfnum="28166"/>
							<outline text="}," created="Tue, 23 Jul 2013 12:54:50 GMT" pgfnum="28164"/>
							</outline>
						<outline text="productname: function () {" created="Tue, 23 Jul 2013 12:54:43 GMT" pgfnum="28163">
							<outline text="return (appConsts.productname);" created="Tue, 23 Jul 2013 12:55:15 GMT" pgfnum="28166"/>
							<outline text="}," created="Tue, 23 Jul 2013 12:54:50 GMT" pgfnum="28164"/>
							</outline>
						<outline text="productnameForDisplay: function () {" created="Tue, 23 Jul 2013 12:54:43 GMT" pgfnum="28163">
							<outline text="return (appConsts.productnameForDisplay);" created="Tue, 23 Jul 2013 12:55:15 GMT" pgfnum="28166"/>
							<outline text="}" created="Tue, 23 Jul 2013 12:54:50 GMT" pgfnum="28164"/>
							</outline>
						<outline text="}" created="Fri, 29 Nov 2013 15:54:00 GMT" pgfnum="32567"/>
						</outline>
					<outline text="var cms = {" isComment="true" created="Wed, 04 Dec 2013 15:41:42 GMT" pgfnum="33085">
						<outline text="version: function () {" created="Tue, 23 Jul 2013 12:54:43 GMT" pgfnum="28163">
							<outline text="return (cmsVersion);" created="Tue, 23 Jul 2013 12:55:15 GMT" pgfnum="28166"/>
							<outline text="}," created="Tue, 23 Jul 2013 12:54:50 GMT" pgfnum="28164"/>
							</outline>
						<outline text="renderPage: function (path) {" created="Wed, 04 Dec 2013 15:43:10 GMT" pgfnum="33088">
							<outline text="var tab = getActiveTab ();" created="Wed, 04 Dec 2013 15:44:46 GMT" pgfnum="33091"/>
							<outline text="var xstruct = getTabXstruct (tab);"/>
							<outline text="return (cmsRenderPage (tab, xstruct, path));"/>
							<outline text="}" created="Wed, 04 Dec 2013 15:43:25 GMT" pgfnum="33089"/>
							</outline>
						<outline text="}" created="Wed, 04 Dec 2013 15:41:48 GMT" pgfnum="33086"/>
						</outline>
					<outline text="var wordPress = {" isComment="true" created="Sat, 27 Jul 2013 16:55:56 GMT" pgfnum="28349">
						<outline text="updatePost: function (title, msgbody, idpost, callback, wpBlogUrl, wpUsername, wpPassword) {" created="Sat, 27 Jul 2013 16:56:08 GMT" pgfnum="28351">
							<outline text="var s;" created="Wed, 31 Jul 2013 21:27:06 GMT" pgfnum="28595"/>
							<outline text="if (wpBlogUrl == undefined) {" created="Wed, 31 Jul 2013 21:27:07 GMT" pgfnum="28596">
								<outline text="wpBlogUrl = appPrefs.wordpressBlogUrl;" created="Wed, 31 Jul 2013 21:27:20 GMT" pgfnum="28599"/>
								<outline text="}" created="Wed, 31 Jul 2013 21:27:24 GMT" pgfnum="28600"/>
								</outline>
							<outline text="if (wpUsername == undefined) {" created="Wed, 31 Jul 2013 21:27:07 GMT" pgfnum="28596">
								<outline text="wpUsername = appPrefs.wordpressUsername;" created="Wed, 31 Jul 2013 21:27:20 GMT" pgfnum="28599"/>
								<outline text="}" created="Wed, 31 Jul 2013 21:27:24 GMT" pgfnum="28600"/>
								</outline>
							<outline text="if (wpPassword == undefined) {" created="Wed, 31 Jul 2013 21:27:07 GMT" pgfnum="28596">
								<outline text="wpPassword = appPrefs.wordpressPassword;" created="Wed, 31 Jul 2013 21:27:20 GMT" pgfnum="28599"/>
								<outline text="}" created="Wed, 31 Jul 2013 21:27:24 GMT" pgfnum="28600"/>
								</outline>
							<outline text="if (idpost == undefined) {" created="Wed, 31 Jul 2013 23:08:30 GMT" pgfnum="28603">
								<outline text="idpost = 0;" created="Wed, 31 Jul 2013 23:08:38 GMT" pgfnum="28604"/>
								<outline text="}" created="Wed, 31 Jul 2013 23:08:47 GMT" pgfnum="28605"/>
								</outline>
							<outline text="if (msgbody == undefined) {" created="Wed, 31 Jul 2013 23:08:30 GMT" pgfnum="28603">
								<outline text="msgbody = &quot;&quot;;" created="Wed, 31 Jul 2013 23:08:38 GMT" pgfnum="28604"/>
								<outline text="}" created="Wed, 31 Jul 2013 23:08:47 GMT" pgfnum="28605"/>
								</outline>
							<outline text="s = &quot;postBody=&quot; + encodeURIComponent (msgbody) + &quot;&amp;weblogUrl=&quot; + encodeURIComponent (wpBlogUrl) + &quot;&amp;idPost=&quot; + encodeURIComponent (idpost) + &quot;&amp;postTitle=&quot; + encodeURIComponent (title) + &quot;&amp;blogUsername=&quot; + encodeURIComponent (wpUsername) + &quot;&amp;blogPassword=&quot; + encodeURIComponent (wpPassword);" created="Thu, 31 Jan 2013 16:12:21 GMT" pgfnum="17977"/>
							<outline text="debugMessage (&quot;wordPress.updatePost: &quot; + s);" created="Thu, 31 Jan 2013 16:44:38 GMT" pgfnum="17994"/>
							<outline text="var jxhr = $.ajax ({ ">
								<outline text="url: updateBlogpostUrl,"/>
								<outline text="data: s," created="Tue, 05 Feb 2013 17:48:38 GMT" pgfnum="18268"/>
								<outline text="type: &quot;POST&quot;," created="Thu, 17 Jan 2013 13:15:47 GMT" pgfnum="17271"/>
								<outline text="dataType: &quot;jsonp&quot;, "/>
								<outline text="timeout: 30000,"/>
								<outline text="jsonpCallback : &quot;getData&quot;"/>
								<outline text="}) "/>
								</outline>
							<outline text=".success (function (data, status) { ">
								<outline text="if (callback != undefined) {" created="Wed, 31 Jul 2013 23:07:33 GMT" pgfnum="28601">
									<outline text="callback (data);" created="Wed, 31 Jul 2013 20:58:07 GMT" pgfnum="28591"/>
									<outline text="}" created="Wed, 31 Jul 2013 23:07:42 GMT" pgfnum="28602"/>
									</outline>
								<outline text="}) "/>
								</outline>
							<outline text=".error (function (status) { ">
								<outline text="});"/>
								</outline>
							<outline text="}," created="Sat, 27 Jul 2013 16:57:09 GMT" pgfnum="28352"/>
							</outline>
						<outline text="postCursor: function (callback) {" created="Thu, 01 Aug 2013 14:31:44 GMT" pgfnum="28643">
							<outline text="var idpost = op.attributes.getOne  (&quot;idpost&quot;), bodytext = &quot;&quot;;"/>
							<outline text="if (idpost == undefined) {">
								<outline text="idpost = 0;"/>
								<outline text="}"/>
								</outline>
							<outline text="op.visitSubs ( //get bodytext">
								<outline text="function (headline, levelnum) {">
									<outline text="var pretext = &quot;&lt;li&gt;&quot;, posttext = &quot;&lt;/li&gt;&quot;;" created="Thu, 01 Aug 2013 14:45:12 GMT" pgfnum="28664"/>
									<outline text="if (levelnum == 0) {" created="Thu, 01 Aug 2013 14:44:08 GMT" pgfnum="28656">
										<outline text="pretext = &quot;&lt;p&gt;&quot;;" created="Thu, 01 Aug 2013 14:44:20 GMT" pgfnum="28659"/>
										<outline text="posttext = &quot;&lt;/p&gt;&quot;;" created="Thu, 01 Aug 2013 14:44:36 GMT" pgfnum="28660"/>
										<outline text="}" created="Thu, 01 Aug 2013 14:44:42 GMT" pgfnum="28661"/>
										</outline>
									<outline text="bodytext +=  string.filledString (&quot;\t&quot;, levelnum) + pretext + headline.getLineText () + posttext + &quot;\r\n&quot;;"/>
									<outline text="},"/>
									</outline>
								<outline text="function (levelnum) {">
									<outline text="bodytext += string.filledString (&quot;\t&quot;, levelnum) + &quot;&lt;ul&gt;\r\n&quot;;" created="Thu, 01 Aug 2013 14:43:53 GMT" pgfnum="28654"/>
									<outline text="}," created="Thu, 01 Aug 2013 14:43:49 GMT" pgfnum="28653"/>
									</outline>
								<outline text="function (levelnum) {">
									<outline text="bodytext += string.filledString (&quot;\t&quot;, levelnum + 1) + &quot;&lt;/ul&gt;\r\n&quot;;" created="Thu, 01 Aug 2013 14:43:53 GMT" pgfnum="28654"/>
									<outline text="}" created="Thu, 01 Aug 2013 14:43:57 GMT" pgfnum="28655"/>
									</outline>
								<outline text=");"/>
								</outline>
							<outline text="wordPress.updatePost (op.getLineText (), bodytext, idpost, function (data) {">
								<outline text="if (data.error != undefined) { ">
									<outline text="speaker.beep ();"/>
									<outline text="dialog.alert (data.error);"/>
									<outline text="return;"/>
									<outline text="}"/>
									</outline>
								<outline text="if ((op.attributes.getOne  (&quot;idpost&quot;) == undefined) &amp;&amp; (data.idpost != undefined)) {">
									<outline text="op.attributes.setOne (&quot;idpost&quot;, data.idpost);"/>
									<outline text="}"/>
									</outline>
								<outline text="if ((op.attributes.getOne  (&quot;url&quot;) == undefined) &amp;&amp; (data.link != undefined)) {">
									<outline text="op.attributes.setOne (&quot;url&quot;, data.link);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (op.attributes.getOne  (&quot;type&quot;) != &quot;metaWeblogPost&quot;) {">
									<outline text="op.attributes.setOne (&quot;type&quot;, &quot;metaWeblogPost&quot;);"/>
									<outline text="}" created="Thu, 01 Aug 2013 15:07:00 GMT" pgfnum="28667"/>
									</outline>
								<outline text="//bump ctsaves att on blogpost headline">
									<outline text="var ctsaves = op.attributes.getOne (&quot;ctSaves&quot;); "/>
									<outline text="if (ctsaves == undefined) {">
										<outline text="ctsaves = 0;"/>
										<outline text="}"/>
										</outline>
									<outline text="op.attributes.setOne (&quot;ctSaves&quot;, ++ctsaves);"/>
									</outline>
								<outline text="if (callback != undefined) {" created="Thu, 01 Aug 2013 16:09:54 GMT" pgfnum="28668">
									<outline text="callback (data);" created="Thu, 01 Aug 2013 16:09:59 GMT" pgfnum="28669"/>
									<outline text="}" created="Thu, 01 Aug 2013 16:10:02 GMT" pgfnum="28670"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Thu, 01 Aug 2013 14:31:48 GMT" pgfnum="28644"/>
							</outline>
						<outline text="}" created="Sat, 27 Jul 2013 16:56:01 GMT" pgfnum="28350"/>
						</outline>
					<outline text="var op = {">
						<outline text="expand: function () {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="var package = {">
								<outline text="verb: &quot;expand&quot;,"/>
								<outline text="ctLevels: 1"/>
								<outline text="};"/>
								</outline>
							<outline text="bullMancuso.send (&quot;op&quot;, utils.jsonStringify (package));"/>
							<outline text=""/>
							<outline text="return (true);" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="expandAllLevels: function () {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.expandAllLevels ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="expandEverything: function () {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.fullExpand ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="expandTo: function (headline) {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="expandToCursor (headline);"/>
							<outline text="return (setCursorActive (headline.getCursor ()));"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="collapse: function () {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.collapse ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="collapseEverything: function () {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.fullCollapse ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="" created="Thu, 18 Jul 2013 00:11:04 GMT" pgfnum="28016"/>
						<outline text="go: function (dir, ct) {">
							<outline text="if (dir == right) {" created="Mon, 22 Jul 2013 19:01:37 GMT" pgfnum="28116">
								<outline text="op.expand ();" created="Mon, 22 Jul 2013 19:00:59 GMT" pgfnum="28115"/>
								<outline text="}" created="Mon, 22 Jul 2013 19:01:46 GMT" pgfnum="28117"/>
								</outline>
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.go (dir, ct));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="},"/>
							</outline>
						<outline text="firstSummit: function () {" created="Wed, 17 Jul 2013 02:32:07 GMT" pgfnum="27963">
							<outline text="opFirstSummit ();"/>
							<outline text="return (true);" created="Wed, 17 Jul 2013 02:37:05 GMT" pgfnum="27969"/>
							<outline text="}," created="Wed, 17 Jul 2013 02:32:17 GMT" pgfnum="27964"/>
							</outline>
						<outline text="countSubs: function () {" created="Wed, 17 Jul 2013 02:33:18 GMT" pgfnum="27965">
							<outline text="return ($(opGetActiveOutliner ()).concord().op.countSubs ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Wed, 17 Jul 2013 02:33:24 GMT" pgfnum="27966"/>
							</outline>
						<outline text="hasSubs: function () {" created="Wed, 17 Jul 2013 02:33:51 GMT" pgfnum="27967">
							<outline text="return (op.countSubs () &gt; 0);" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Wed, 17 Jul 2013 02:33:57 GMT" pgfnum="27968"/>
							</outline>
						<outline text="getLineText: function () {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.getLineText ());" created="Thu, 04 Apr 2013 17:51:04 GMT" pgfnum="22072"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="setLineText: function (s) { //8/7/13 by DW" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.setLineText (s));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
							</outline>
						<outline text="" created="Thu, 18 Jul 2013 00:11:29 GMT" pgfnum="28019"/>
						<outline text="insert: function (s, direction) {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.insert (s, direction));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="reorg: function (dir, ct) {" created="Thu, 18 Jul 2013 00:09:23 GMT" pgfnum="28014">
							<outline text="if (ct == undefined) {" created="Thu, 01 Aug 2013 16:54:43 GMT" pgfnum="28671">
								<outline text="ct = 1;" created="Thu, 01 Aug 2013 16:54:49 GMT" pgfnum="28672"/>
								<outline text="}" created="Thu, 01 Aug 2013 16:54:51 GMT" pgfnum="28673"/>
								</outline>
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.reorg (dir, ct));"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:09:29 GMT" pgfnum="28015"/>
							</outline>
						<outline text="promote: function () {" created="Thu, 18 Jul 2013 00:09:23 GMT" pgfnum="28014">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.promote ());"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:09:29 GMT" pgfnum="28015"/>
							</outline>
						<outline text="demote: function () {" created="Thu, 18 Jul 2013 00:09:23 GMT" pgfnum="28014">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.demote ());"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:09:29 GMT" pgfnum="28015"/>
							</outline>
						<outline text="deleteSubs: function () {" created="Thu, 18 Jul 2013 00:09:23 GMT" pgfnum="28014">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.deleteSubs ());"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:09:29 GMT" pgfnum="28015"/>
							</outline>
						<outline text="" created="Wed, 24 Jul 2013 14:04:58 GMT" pgfnum="28175"/>
						<outline text="getCursorOpml: function () {" created="Wed, 24 Jul 2013 14:04:07 GMT" pgfnum="28170">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.cursorToXml ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Wed, 24 Jul 2013 14:04:25 GMT" pgfnum="28173"/>
							</outline>
						<outline text="insertOpml: function (opmltext, dir) {" created="Sat, 27 Jul 2013 14:30:49 GMT" pgfnum="28334">
							<outline text="if (dir == undefined) {" created="Sat, 27 Jul 2013 14:31:38 GMT" pgfnum="28336">
								<outline text="dir = down;" created="Sat, 27 Jul 2013 14:31:43 GMT" pgfnum="28337"/>
								<outline text="}" created="Sat, 27 Jul 2013 14:31:46 GMT" pgfnum="28338"/>
								</outline>
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.insertXml (opmltext, dir));"/>
							<outline text="}," created="Sat, 27 Jul 2013 14:30:58 GMT" pgfnum="28335"/>
							</outline>
						<outline text="" created="Wed, 24 Jul 2013 14:04:55 GMT" pgfnum="28174"/>
						<outline text="bold: function () {" created="Thu, 18 Jul 2013 00:09:23 GMT" pgfnum="28014">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.bold ());"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:09:29 GMT" pgfnum="28015"/>
							</outline>
						<outline text="italic: function () {" created="Thu, 18 Jul 2013 00:09:23 GMT" pgfnum="28014">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.italic ());"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:09:29 GMT" pgfnum="28015"/>
							</outline>
						<outline text="strikethrough: function () {" created="Thu, 18 Jul 2013 00:09:23 GMT" pgfnum="28014">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.strikethrough ());"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:09:29 GMT" pgfnum="28015"/>
							</outline>
						<outline text="link: function () {" created="Thu, 18 Jul 2013 00:09:23 GMT" pgfnum="28014">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.link ());"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:09:29 GMT" pgfnum="28015"/>
							</outline>
						<outline text="" created="Sat, 27 Jul 2013 17:51:34 GMT" pgfnum="28353"/>
						<outline text="isComment: function () {" created="Wed, 17 Jul 2013 19:59:24 GMT" pgfnum="27999">
							<outline text="var isComment = op.attributes.getOne (&quot;isComment&quot;)" created="Wed, 17 Jul 2013 20:11:10 GMT" pgfnum="28002"/>
							<outline text="if ((isComment == undefined) || (isComment == &quot;false&quot;)) {" created="Wed, 17 Jul 2013 20:11:40 GMT" pgfnum="28004">
								<outline text="return (false);" created="Wed, 17 Jul 2013 20:12:03 GMT" pgfnum="28005"/>
								<outline text="}" created="Wed, 17 Jul 2013 20:12:12 GMT" pgfnum="28006"/>
								</outline>
							<outline text="else {" created="Wed, 17 Jul 2013 20:12:15 GMT" pgfnum="28007">
								<outline text="return (true);" created="Wed, 17 Jul 2013 20:12:17 GMT" pgfnum="28008"/>
								<outline text="}" created="Wed, 17 Jul 2013 20:12:21 GMT" pgfnum="28009"/>
								</outline>
							<outline text="" isComment="true" created="Wed, 17 Jul 2013 20:11:10 GMT" pgfnum="28003"/>
							<outline text="return ($(opGetActiveOutliner ()).concord ().script.isComment ());" isComment="true"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:59:29 GMT" pgfnum="28000"/>
							</outline>
						<outline text="unComment: function () {" created="Wed, 17 Jul 2013 19:59:24 GMT" pgfnum="27999">
							<outline text="op.attributes.deleteOne (&quot;isComment&quot;);" created="Wed, 17 Jul 2013 20:15:03 GMT" pgfnum="28012"/>
							<outline text="return ($(opGetActiveOutliner ()).concord ().script.unComment ());"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:59:29 GMT" pgfnum="28000"/>
							</outline>
						<outline text="makeComment: function () {" created="Wed, 17 Jul 2013 19:59:24 GMT" pgfnum="27999">
							<outline text="op.attributes.setOne (&quot;isComment&quot;, &quot;true&quot;);" created="Wed, 17 Jul 2013 20:15:43 GMT" pgfnum="28013"/>
							<outline text="return ($(opGetActiveOutliner ()).concord ().script.makeComment ());"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:59:29 GMT" pgfnum="28000"/>
							</outline>
						<outline text="toggleComment: function () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
							<outline text="if (op.isComment ()) {">
								<outline text="op.unComment ();" created="Fri, 01 Feb 2013 22:36:29 GMT" pgfnum="18083"/>
								<outline text="}" created="Fri, 01 Feb 2013 22:34:57 GMT" pgfnum="18080"/>
								</outline>
							<outline text="else {" created="Fri, 01 Feb 2013 22:35:00 GMT" pgfnum="18081">
								<outline text="op.makeComment ();" created="Fri, 01 Feb 2013 22:36:29 GMT" pgfnum="18083"/>
								<outline text="}" created="Fri, 01 Feb 2013 22:35:02 GMT" pgfnum="18082"/>
								</outline>
							<outline text="}," created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
							</outline>
						<outline text="" created="Sun, 28 Jul 2013 18:52:28 GMT" pgfnum="28377"/>
						<outline text="setRenderMode: function (flrendermode) { //7/28/13 by DW" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="$(opGetActiveOutliner ()).concord ().op.setRenderMode (flrendermode);"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="getRenderMode: function () { //7/28/13 by DW" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.getRenderMode ());"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="toggleRenderMode: function () { //7/28/13 by DW" created="Sun, 28 Jul 2013 18:52:31 GMT" pgfnum="28378">
							<outline text="op.setRenderMode (!op.getRenderMode ());" created="Sun, 28 Jul 2013 18:52:58 GMT" pgfnum="28381"/>
							<outline text="}," created="Sun, 28 Jul 2013 18:52:41 GMT" pgfnum="28379"/>
							</outline>
						<outline text="" created="Thu, 18 Jul 2013 00:18:29 GMT" pgfnum="28027"/>
						<outline text="getCursor: function () {" created="Thu, 18 Jul 2013 00:09:23 GMT" pgfnum="28014">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.getCursorRef ());"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:09:29 GMT" pgfnum="28015"/>
							</outline>
						<outline text="getCursorUrl: function () {" created="Wed, 31 Jul 2013 14:13:08 GMT" pgfnum="28585">
							<outline text="var parent = undefined;" created="Wed, 31 Jul 2013 14:09:07 GMT" pgfnum="28581"/>
							<outline text="op.visitToSummit (function (headline) {" created="Tue, 30 Jul 2013 17:57:53 GMT" pgfnum="28541">
								<outline text="var type = headline.attributes.getOne (&quot;type&quot;);" created="Tue, 30 Jul 2013 17:58:13 GMT" pgfnum="28543"/>
								<outline text="if (type != undefined) {" created="Tue, 30 Jul 2013 17:58:42 GMT" pgfnum="28544">
									<outline text="parent = headline;" created="Wed, 31 Jul 2013 14:10:26 GMT" pgfnum="28584"/>
									<outline text="return (false); " created="Tue, 30 Jul 2013 18:10:42 GMT" pgfnum="28556"/>
									<outline text="}" created="Tue, 30 Jul 2013 17:58:53 GMT" pgfnum="28546"/>
									</outline>
								<outline text="return (true); " created="Tue, 30 Jul 2013 18:10:46 GMT" pgfnum="28557"/>
								<outline text="});" created="Tue, 30 Jul 2013 17:58:05 GMT" pgfnum="28542"/>
								</outline>
							<outline text="return (getTrexUrl (opGetActiveOutliner (), parent, true));" created="Wed, 19 Jun 2013 20:23:28 GMT" pgfnum="26714"/>
							<outline text="}," created="Wed, 31 Jul 2013 14:13:22 GMT" pgfnum="28589"/>
							</outline>
						<outline text="" created="Wed, 31 Jul 2013 14:13:08 GMT" pgfnum="28588"/>
						<outline text="runSelection: function () {" created="Thu, 18 Jul 2013 00:14:05 GMT" pgfnum="28024">
							<outline text="var value = eval (op.getLineText ());" created="Wed, 09 Jan 2013 14:30:59 GMT" pgfnum="16922"/>
							<outline text="op.deleteSubs ();" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="op.insert (value, right);" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="op.go (left, 1);" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:14:12 GMT" pgfnum="28025"/>
							</outline>
						<outline text="setModified: function () {" created="Thu, 18 Jul 2013 00:12:11 GMT" pgfnum="28021">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.markChanged ());"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:12:17 GMT" pgfnum="28022"/>
							</outline>
						<outline text="getModified: function () {" created="Thu, 18 Jul 2013 00:12:11 GMT" pgfnum="28021">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.changed ());"/>
							<outline text="}," created="Thu, 18 Jul 2013 00:12:17 GMT" pgfnum="28022"/>
							</outline>
						<outline text="setTextMode: function (fltextmode) {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="$(opGetActiveOutliner ()).concord ().op.setTextMode (fltextmode);"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="visitSubs: function (lineCallback, indentCallback, outdentCallback) {" created="Thu, 25 Jul 2013 23:24:56 GMT" pgfnum="28294">
							<outline text="var levelnum = 0;" created="Thu, 25 Jul 2013 23:27:04 GMT" pgfnum="28296"/>
							<outline text="var visitSub = function (sub) {">
								<outline text="lineCallback (sub, levelnum);" created="Thu, 25 Jul 2013 23:29:28 GMT" pgfnum="28299"/>
								<outline text="if (sub.countSubs () &gt; 0) {">
									<outline text="if (indentCallback != undefined) {" created="Thu, 25 Jul 2013 23:38:47 GMT" pgfnum="28301">
										<outline text="indentCallback (levelnum);" created="Thu, 25 Jul 2013 23:38:55 GMT" pgfnum="28302"/>
										<outline text="}" created="Thu, 25 Jul 2013 23:38:58 GMT" pgfnum="28303"/>
										</outline>
									<outline text="levelnum++;"/>
									<outline text="sub.visitLevel (visitSub); "/>
									<outline text="levelnum--; " created="Wed, 19 Jun 2013 19:38:22 GMT" pgfnum="26704"/>
									<outline text="if (outdentCallback != undefined) {" created="Thu, 25 Jul 2013 23:38:47 GMT" pgfnum="28301">
										<outline text="outdentCallback (levelnum);" created="Thu, 25 Jul 2013 23:38:55 GMT" pgfnum="28302"/>
										<outline text="}" created="Thu, 25 Jul 2013 23:38:58 GMT" pgfnum="28303"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="return (true);" created="Thu, 25 Jul 2013 23:32:59 GMT" pgfnum="28300"/>
								<outline text="};"/>
								</outline>
							<outline text="op.getCursor ().visitLevel (visitSub);" created="Thu, 25 Jul 2013 23:27:14 GMT" pgfnum="28297"/>
							<outline text="}," created="Thu, 25 Jul 2013 23:25:13 GMT" pgfnum="28295"/>
							</outline>
						<outline text="visitAll: function (callback) {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.visitAll (callback));" created="Mon, 20 May 2013 15:55:13 GMT" pgfnum="2782"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="visitToSummit: function (callback) {" created="Wed, 17 Jul 2013 19:14:13 GMT" pgfnum="27994">
							<outline text="return ($(opGetActiveOutliner ()).concord ().op.visitToSummit (callback));" created="Mon, 20 May 2013 15:55:13 GMT" pgfnum="2782"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:14:19 GMT" pgfnum="27995"/>
							</outline>
						<outline text="attributes: {" created="Wed, 17 Jul 2013 13:35:54 GMT" pgfnum="27978">
							<outline text="getAll: function () {" created="Wed, 17 Jul 2013 13:36:01 GMT" pgfnum="27979">
								<outline text="return ($(opGetActiveOutliner ()).concord ().op.attributes.getAll ());"/>
								<outline text="}," created="Wed, 17 Jul 2013 13:36:08 GMT" pgfnum="27980"/>
								</outline>
							<outline text="getOne: function (name) {" created="Wed, 17 Jul 2013 13:36:01 GMT" pgfnum="27979">
								<outline text="return $(opGetActiveOutliner ()).concord ().op.attributes.getOne (name);"/>
								<outline text="}," created="Wed, 17 Jul 2013 13:36:08 GMT" pgfnum="27980"/>
								</outline>
							<outline text="setOne: function (name, value) {" created="Wed, 17 Jul 2013 18:58:25 GMT" pgfnum="27987">
								<outline text="return $(opGetActiveOutliner ()).concord ().op.attributes.setOne (name, value);"/>
								<outline text="}," created="Wed, 17 Jul 2013 18:58:33 GMT" pgfnum="27988"/>
								</outline>
							<outline text="addGroup: function (atts) {" created="Wed, 17 Jul 2013 18:58:25 GMT" pgfnum="27987">
								<outline text="return $(opGetActiveOutliner ()).concord ().op.attributes.setGroup (atts);"/>
								<outline text="}," created="Wed, 17 Jul 2013 18:58:33 GMT" pgfnum="27988"/>
								</outline>
							<outline text="deleteOne: function (name) {" created="Wed, 17 Jul 2013 19:01:37 GMT" pgfnum="27989">
								<outline text="var atts = op.attributes.getAll ();" created="Tue, 11 Jun 2013 14:47:29 GMT" pgfnum="25741"/>
								<outline text="if (atts [name] != undefined) {" created="Tue, 11 Jun 2013 14:47:41 GMT" pgfnum="25742">
									<outline text="delete atts [name];" created="Tue, 11 Jun 2013 14:50:55 GMT" pgfnum="25744"/>
									<outline text="}" created="Tue, 11 Jun 2013 14:48:02 GMT" pgfnum="25743"/>
									</outline>
								<outline text="op.attributes.addGroup (atts);"/>
								<outline text="}," created="Wed, 17 Jul 2013 19:01:45 GMT" pgfnum="27990"/>
								</outline>
							<outline text="makeEmpty: function () {" created="Wed, 17 Jul 2013 19:04:32 GMT" pgfnum="27991">
								<outline text="var atts = new Object ();" created="Wed, 17 Jul 2013 19:04:55 GMT" pgfnum="27993"/>
								<outline text="op.attributes.addGroup (atts);"/>
								<outline text="}" created="Wed, 17 Jul 2013 19:04:38 GMT" pgfnum="27992"/>
								</outline>
							<outline text="}" created="Wed, 17 Jul 2013 13:36:10 GMT" pgfnum="27981"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="var script = {" isComment="true" created="Wed, 17 Jul 2013 19:58:59 GMT" pgfnum="27997">
						<outline text="isComment: function () {" created="Wed, 17 Jul 2013 19:59:24 GMT" pgfnum="27999">
							<outline text="var isComment = op.attributes.getOne (&quot;isComment&quot;)" created="Wed, 17 Jul 2013 20:11:10 GMT" pgfnum="28002"/>
							<outline text="if ((isComment == undefined) || (isComment == &quot;false&quot;)) {" created="Wed, 17 Jul 2013 20:11:40 GMT" pgfnum="28004">
								<outline text="return (false);" created="Wed, 17 Jul 2013 20:12:03 GMT" pgfnum="28005"/>
								<outline text="}" created="Wed, 17 Jul 2013 20:12:12 GMT" pgfnum="28006"/>
								</outline>
							<outline text="else {" created="Wed, 17 Jul 2013 20:12:15 GMT" pgfnum="28007">
								<outline text="return (true);" created="Wed, 17 Jul 2013 20:12:17 GMT" pgfnum="28008"/>
								<outline text="}" created="Wed, 17 Jul 2013 20:12:21 GMT" pgfnum="28009"/>
								</outline>
							<outline text="" isComment="true" created="Wed, 17 Jul 2013 20:11:10 GMT" pgfnum="28003"/>
							<outline text="return ($(opGetActiveOutliner ()).concord ().script.isComment ());" isComment="true"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:59:29 GMT" pgfnum="28000"/>
							</outline>
						<outline text="unComment: function () {" created="Wed, 17 Jul 2013 19:59:24 GMT" pgfnum="27999">
							<outline text="op.attributes.deleteOne (&quot;isComment&quot;);" created="Wed, 17 Jul 2013 20:15:03 GMT" pgfnum="28012"/>
							<outline text="return ($(opGetActiveOutliner ()).concord ().script.unComment ());"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:59:29 GMT" pgfnum="28000"/>
							</outline>
						<outline text="makeComment: function () {" created="Wed, 17 Jul 2013 19:59:24 GMT" pgfnum="27999">
							<outline text="op.attributes.setOne (&quot;isComment&quot;, &quot;true&quot;);" created="Wed, 17 Jul 2013 20:15:43 GMT" pgfnum="28013"/>
							<outline text="return ($(opGetActiveOutliner ()).concord ().script.makeComment ());"/>
							<outline text="}," created="Wed, 17 Jul 2013 19:59:29 GMT" pgfnum="28000"/>
							</outline>
						<outline text="toggleComment: function () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
							<outline text="if (script.isComment ()) {">
								<outline text="script.unComment ();" created="Fri, 01 Feb 2013 22:36:29 GMT" pgfnum="18083"/>
								<outline text="}" created="Fri, 01 Feb 2013 22:34:57 GMT" pgfnum="18080"/>
								</outline>
							<outline text="else {" created="Fri, 01 Feb 2013 22:35:00 GMT" pgfnum="18081">
								<outline text="script.makeComment ();" created="Fri, 01 Feb 2013 22:36:29 GMT" pgfnum="18083"/>
								<outline text="}" created="Fri, 01 Feb 2013 22:35:02 GMT" pgfnum="18082"/>
								</outline>
							<outline text="}," created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
							</outline>
						<outline text="}" created="Wed, 17 Jul 2013 19:59:03 GMT" pgfnum="27998"/>
						</outline>
					<outline text="stats.ctScriptRuns++;"/>
					<outline text="stats.whenLastScriptRun = now;"/>
					<outline text="statsChanged ();"/>
					<outline text="with (localStorage) {">
						<outline text="return (eval (s));" created="Thu, 23 Jan 2014 16:59:39 GMT" pgfnum="36438"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function handleAsyncMessage (event, arg1, arg2, arg3) {">
					<outline text="Changes" isComment="true">
						<outline text="9/7/17; 1:06:33 PM by DW">
							<outline text="Added &quot;openItem&quot; message.">
								<outline text="openfolder isn't really opening the folder. it's the equiv of Finder.reveal () in Frontier. openItem hopefully will actually open a folder if that's what you send it."/>
								</outline>
							</outline>
						</outline>
					<outline text="var flHandled = false;"/>
					<outline text="debugMessage (&quot;handleAsyncMessage: &quot; + arg1 + &quot;, arg2 == &quot; + arg2 + &quot;, arg3 == &quot; + arg3); //commented -- some of the params are huuuuge" isComment="true"/>
					<outline text="if (config.asyncMessageCallback !== undefined) {">
						<outline text="flHandled = config.asyncMessageCallback (event, arg1, arg2, arg3);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (!flHandled) {">
						<outline text="switch (arg1) {">
							<outline text="case &quot;hello&quot;:">
								<outline text="bullMancuso = event.sender;"/>
								<outline text="debugMessage (&quot;hello message received&quot;);"/>
								<outline text="bullMancuso.send (&quot;config&quot;, utils.jsonStringify (config));"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;runScript&quot;:">
								<outline text="var val;"/>
								<outline text="debugMessage (&quot;runScript: &quot; + arg2);"/>
								<outline text="try {">
									<outline text="val = runUserScript (arg2, &quot;quickscript&quot;);"/>
									<outline text="debugMessage (&quot;runScript: val == &quot; + val);"/>
									<outline text="event.sender.send (&quot;scriptReturnVal&quot;, val);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="debugMessage (&quot;runScript: err.message == &quot; + err.message);"/>
									<outline text="event.sender.send (&quot;scriptReturnVal&quot;, undefined, err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;sendTweet&quot;:" isComment="true">
								<outline text="debugMessage (&quot;sendTweet: &quot; + arg2);"/>
								<outline text="try {">
									<outline text="readConfig (config.fnameTwitterCredentials, twitterCredentials, function () {">
										<outline text="debugMessage (&quot;sendTweet: twitterCredentials == &quot; + utils.jsonStringify (twitterCredentials));"/>
										<outline text="twitterLib.startup (appConsts, debugMessage); //send over the app credentials"/>
										<outline text="twitterLib.tweet (arg2, arg3, debugMessage, function (jsontext, errorjsontext) {">
											<outline text="if (errorjsontext !== undefined) { //3/4/17 by DW">
												<outline text="debugMessage (&quot;sendTweet: errorjsontext == &quot; + errorjsontext);"/>
												<outline text="}"/>
												</outline>
											<outline text="event.sender.send (&quot;tweetReturnVal&quot;, jsontext, errorjsontext);"/>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="debugMessage (&quot;sendTweet: err.message == &quot; + err.message);"/>
									<outline text="event.sender.send (&quot;tweetReturnVal&quot;, undefined, err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;setTwitterCredentials&quot;:" isComment="true">
								<outline text="twitterLib.setUserCredentials (arg2);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;openUrl&quot;: ">
								<outline text="electron.shell.openExternal (arg2);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;openFolder&quot;: ">
								<outline text="electron.shell.showItemInFolder (arg2);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;openItem&quot;: //9/7/17 by DW">
								<outline text="electron.shell.openItem (arg2);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;httpRequest&quot;:" isComment="true">
								<outline text="feedToolsRequest (arg2, arg3, function (headers, val) {">
									<outline text="event.sender.send (&quot;httpReturnVal&quot;, headers, val);"/>
									<outline text="});"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;readAllFeedsNow&quot;: //4/18/17 by DW" isComment="true">
								<outline text="feedtools.readAllFeedsNow ();"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;setConfig&quot;: //4/21/17 by DW">
								<outline text="var theConfigSubset = JSON.parse (arg2);"/>
								<outline text="for (x in theConfigSubset) {">
									<outline text="config [x] = theConfigSubset [x];"/>
									<outline text="}"/>
									</outline>
								<outline text="updateConfigJson (theConfigSubset);"/>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function electronStartup () {">
					<outline text="Changes" isComment="true">
						<outline text="11/22/19; 1:30:05 PM by DW">
							<outline text="Provide default for webPreferences, now required by Electron.">
								<outline text="https://stackoverflow.com/questions/55093700/electron-5-0-0-uncaught-referenceerror-require-is-not-defined"/>
								</outline>
							</outline>
						</outline>
					<outline text="var myHttpServer = undefined;"/>
					<outline text="function tinyHttpServer (httpRequest, httpResponse) {">
						<outline text="var parsedUrl = urlpack.parse (httpRequest.url, true);" created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078"/>
						<outline text="debugMessage (&quot;tinyHttpServer: parsedUrl == \n&quot; + JSON.stringify (parsedUrl, undefined, 4));"/>
						<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});"/>
						<outline text="httpResponse.end (&quot;Welcome to the camp!&quot;);"/>
						<outline text="" created="Sat, 04 Mar 2023 16:09:14 GMT"/>
						<outline text="if (parsedUrl.search != null) { //3/4/23 by DW" created="Sat, 04 Mar 2023 16:09:14 GMT">
							<outline text="if (parsedUrl.search.length &gt; 0) { //don't open a window for /favicon.ico for example -- 4/16/16 by DW">
								<outline text="electronOpenHomePage (parsedUrl.search);"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Sat, 04 Mar 2023 16:09:29 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (config.flPreventAppSuspension) {">
						<outline text="electron.powerSaveBlocker.start (&quot;prevent-app-suspension&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (config.flPreventHardwareAcceleration) { //8/27/22 by DW" created="Sat, 27 Aug 2022 13:09:47 GMT">
						<outline text="electron.app.disableHardwareAcceleration ();" created="Sat, 27 Aug 2022 13:09:51 GMT"/>
						<outline text="}" created="Sat, 27 Aug 2022 13:09:52 GMT"/>
						</outline>
					<outline text="electron.app.on (&quot;ready&quot;, function () { ">
						<outline text="const options = {">
							<outline text="width: config.mainWindowWidth, "/>
							<outline text="height: config.mainWindowHeight,"/>
							<outline text="webPreferences: { //11/22/19 by DW">
								<outline text="nodeIntegration: true"/>
								<outline text="},"/>
								</outline>
							<outline text="icon: __dirname + &quot;/&quot; + config.iconPath"/>
							<outline text="};"/>
							</outline>
						<outline text="console.log (&quot;electronStartup: options == &quot; + utils.jsonStringify (options)); //11/22/19 by DW"/>
						<outline text="mainWindow = new electron.BrowserWindow (options);"/>
						<outline text="mainWindow.on (&quot;closed&quot;, function () {">
							<outline text="mainWindow = null;"/>
							<outline text="});"/>
							</outline>
						<outline text="mainWindow.webContents.on (&quot;will-navigate&quot;, function (event, url) { ">
							<outline text="if (flOpenUrlsInExternalBrowser) { ">
								<outline text="electron.shell.openExternal (url);"/>
								<outline text="event.preventDefault ();"/>
								<outline text="}"/>
								</outline>
							<outline text="if (utils.beginsWith (urlMainWindow, url)) {">
								<outline text="setTimeout (function () {">
									<outline text="debugMessage (&quot;About to set flOpenUrlsInExternalBrowser true.&quot;);"/>
									<outline text="flOpenUrlsInExternalBrowser = true;"/>
									<outline text="}, 1000);"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="mainWindow.webContents.on (&quot;before-input-event&quot;, function (event, input) { //11/29/19 by DW" isComment="true">
							<outline text="console.log (&quot;before-input-event: input == &quot; + utils.jsonStringify (input));"/>
							<outline text="mainWindow.webContents.setIgnoreMenuShortcuts (true);"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="electron.app.on (&quot;window-all-closed&quot;, function () { ">
						<outline text="electron.app.quit ();"/>
						<outline text="});"/>
						</outline>
					<outline text="electron.ipcMain.on (&quot;asynch-message&quot;, function (event, arg1, arg2, arg3) {">
						<outline text="handleAsyncMessage (event, arg1, arg2, arg3);"/>
						<outline text="});"/>
						</outline>
					<outline text="electron.ipcMain.on (&quot;synchronous-message&quot;, function (event, arg) {">
						<outline text="debugMessage (&quot;IPC message received == &quot; + arg);" isComment="true"/>
						<outline text="switch (arg) {">
							<outline text="case &quot;waitForOAuth&quot;:">
								<outline text="console.log (&quot;waitForOAuth.&quot;);"/>
								<outline text="flOpenUrlsInExternalBrowser = false; "/>
								<outline text="if (myHttpServer === undefined) { //4/15/16 by DW -- can't do this twice">
									<outline text="myHttpServer = http.createServer (tinyHttpServer);"/>
									<outline text="myHttpServer.listen (config.oauthWaitPort);"/>
									<outline text="}"/>
									</outline>
								<outline text="event.returnValue = config.oauthWaitPort;"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;getConfig&quot;: //4/21/17 by DW">
								<outline text="event.returnValue = utils.jsonStringify (config);"/>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function electronOpenHomePage (queryString) {">
					<outline text="Changes" isComment="true">
						<outline text="8/6/17; 10:56:25 AM by DW">
							<outline text="I had the damndest time figuring out where config.flOpenDevToolsAtStart was being set false. Turns out it was in config.json in the user's data folder. "/>
							</outline>
						<outline text="3/29/17; 10:39:26 AM by DW">
							<outline text="I was thinking about changing it so we load the home page over HTTP, and then remembered the reason we don't do that is because I don't want to run the web server here, so the user doesn't have to deal with the dialog that requests permission for the app to be accessible over HTTP. "/>
							</outline>
						</outline>
					<outline text="urlMainWindow = &quot;file://&quot; + config.appDirname + &quot;/&quot; + config.indexfilename + queryString; //set global"/>
					<outline text="console.log (&quot;electronOpenHomePage: urlMainWindow == &quot; + urlMainWindow);"/>
					<outline text="mainWindow.loadURL (urlMainWindow);"/>
					<outline text=""/>
					<outline text="if (config.flOpenDevToolsAtStart) { ">
						<outline text="console.log (&quot;electronOpenHomePage: About to call mainWindow.webContents.openDevTools.&quot;);" isComment="true"/>
						<outline text="mainWindow.webContents.openDevTools ();"/>
						<outline text="setTimeout (function () {" isComment="true">
							<outline text="console.log (&quot;about to call mainWindow.webContents.openDevTools&quot;);"/>
							<outline text="mainWindow.webContents.openDevTools ();"/>
							<outline text="}, 1000);"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="var now = new Date ();"/>
					<outline text="stats.ctSeconds++; "/>
					<outline text="stats.whenLastEverySecond = now;"/>
					<outline text="if (flStatsChanged) {">
						<outline text="flStatsChanged = false;"/>
						<outline text="stats.ctStatsWrites++;"/>
						<outline text="stats.whenLastStatsWrite = now;"/>
						<outline text="writeUserDataFile (fnameStats, stats);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function init (configParam, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="7/29/23; 11:34:47 AM by DW" created="Sat, 29 Jul 2023 15:34:47 GMT">
							<outline text="Let the user specify the location of the userDataFolder for all upper-level code." created="Sat, 29 Jul 2023 15:34:48 GMT"/>
							<outline text="I want this so I can put the folder in Dropbox so it can be shared between systems." created="Sat, 29 Jul 2023 15:35:03 GMT"/>
							</outline>
						<outline text="8/3/17; 10:08:23 AM by DW">
							<outline text="Instead of using the product name for the user's data folder, simply call it &quot;data&quot; (configurable).">
								<outline text="The product's name is already built into what Electron returns, so it's redundant. "/>
								</outline>
							</outline>
						<outline text="5/6/17; 12:00:13 PM by DW">
							<outline text="When reading the app-level config.json file, read it from the directory that Electron is running from. This changes when it's running from the command line or from the built package."/>
							</outline>
						</outline>
					<outline text="function checkForRelocatedUserConfigFile (callback) { //7/29/23 by DW" created="Sat, 29 Jul 2023 15:31:39 GMT">
						<outline text="fs.readFile (config.userDataFolder + fnameConfig, function (err, jsontext) {" created="Sat, 29 Jul 2023 15:32:50 GMT">
							<outline text="if (!err) {" created="Sat, 29 Jul 2023 15:33:10 GMT">
								<outline text="try {" created="Sat, 29 Jul 2023 15:33:20 GMT">
									<outline text="const jstruct = JSON.parse (jsontext);" created="Sat, 29 Jul 2023 15:33:39 GMT"/>
									<outline text="if (jstruct.userDataFolder !== undefined) { " created="Sat, 29 Jul 2023 15:33:55 GMT">
										<outline text="config.userDataFolder = jstruct.userDataFolder;" created="Sat, 29 Jul 2023 15:34:25 GMT"/>
										<outline text="console.log (&quot;checkForRelocatedUserConfigFile: config.userDataFolder == &quot; + config.userDataFolder);" created="Sat, 29 Jul 2023 15:35:38 GMT"/>
										<outline text="}" created="Sat, 29 Jul 2023 15:34:18 GMT"/>
										</outline>
									<outline text="}" created="Sat, 29 Jul 2023 15:33:30 GMT"/>
									</outline>
								<outline text="catch (err) {" created="Sat, 29 Jul 2023 15:33:31 GMT">
									<outline text="}" created="Sat, 29 Jul 2023 15:33:35 GMT"/>
									</outline>
								<outline text="}" created="Sat, 29 Jul 2023 15:33:15 GMT"/>
								</outline>
							<outline text="callback ();" created="Sat, 29 Jul 2023 15:33:15 GMT"/>
							<outline text="});" created="Sat, 29 Jul 2023 15:33:04 GMT"/>
							</outline>
						<outline text="}" created="Sat, 29 Jul 2023 15:31:44 GMT"/>
						</outline>
					<outline text="var now = new Date ();"/>
					<outline text=""/>
					<outline text="if (configParam !== undefined) {">
						<outline text="for (x in configParam) {">
							<outline text="config [x] = configParam [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="console.log (&quot;electronLand.init: config == &quot; + utils.jsonStringify (config));"/>
					<outline text="electronStartup ();"/>
					<outline text="config.userDataFolder = electron.app.getPath (&quot;userData&quot;) + &quot;/&quot; + config.nameUserDataFolder + &quot;/&quot;;  //8/3/17 by DW"/>
					<outline text="console.log (&quot;electronLand.init: config.userDataFolder == &quot; + config.userDataFolder); //7/29/23 by DW" created="Sat, 29 Jul 2023 15:07:17 GMT"/>
					<outline text="utils.sureFolder (config.userDataFolder, function () {">
						<outline text="readConfig (config.appDirname + &quot;/&quot; + fnameConfig, config, function () {">
							<outline text="readUserDataFile (fnameConfig, config, function () {">
								<outline text="console.log (&quot;startup config == &quot; + utils.jsonStringify (config));" isComment="true"/>
								<outline text="readUserDataFile (fnameStats, stats, function () {">
									<outline text="checkForRelocatedUserConfigFile (function () { //7/29/23 by DW" created="Sat, 29 Jul 2023 15:31:03 GMT">
										<outline text="stats.ctStarts++;"/>
										<outline text="stats.whenLastStart = now;"/>
										<outline text="statsChanged ();"/>
										<outline text="sureConfigJson (); //make sure there's a config.json in the user's data directory"/>
										<outline text="electronOpenHomePage (&quot;&quot;);"/>
										<outline text="setInterval (everySecond, 1000); "/>
										<outline text="if (callback !== undefined) {">
											<outline text="callback ();"/>
											<outline text="}"/>
											</outline>
										<outline text="});" created="Sat, 29 Jul 2023 15:31:17 GMT"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="lib/electronshell.js">
				<outline text="exports.init = init;"/>
				<outline text="exports.getConfig = shellGetConfig; //5/3/17 by DW"/>
				<outline text="exports.openUrl = shellOpenUrl;"/>
				<outline text="exports.openFolder = shellOpenFolder;"/>
				<outline text="exports.openUserDataFolder = shellOpenUserDataFolder;"/>
				<outline text="exports.toggleTwitterConnect = shellToggleTwitterConnect;"/>
				<outline text="exports.openFileDialog = shellOpenFileDialog;"/>
				<outline text="exports.newFileDialog = shellNewFileDialog;"/>
				<outline text="exports.openSettingsDialog = shellOpenSettingsDialog;"/>
				<outline text="exports.closeSettingsDialog = settingsCloseDialog;"/>
				<outline text="exports.okSettingsDialog = settingsOkClicked;"/>
				<outline text="exports.getPrefs = shellGetPrefs;"/>
				<outline text="exports.setPrefs = shellSetPrefs;"/>
				<outline text="exports.addTab = addTab;"/>
				<outline text="exports.addInstantTab = addInstantTab;"/>
				<outline text="exports.tabClick = tabClick;"/>
				<outline text="exports.closeTab = closeTab;"/>
				<outline text="exports.getCurrentTab = getCurrentTab;"/>
				<outline text="exports.getTabsArray = getTabsArray;"/>
				<outline text="exports.lockIconClick = lockIconClick;"/>
				<outline text="exports.runScript = shellRunScript;"/>
				<outline text="exports.openLinksInExternalWindow = openLinksInExternalWindow; //8/10/17 by DW"/>
				<outline text="exports.chooseFolderDialog = shellChooseFolderDialog; //8/29/17 by DW"/>
				<outline text="exports.openItem = shellOpenItem; //9/7/17 by DW"/>
				<outline text="exports.openLinkInExternalWindow = openLinkInExternalWindow; //10/24/17 by DW"/>
				<outline text="exports.buildTabs = buildTabs; //2/16/20 by DW"/>
				<outline text="exports.waitForConfirmingEmail = waitForConfirmingEmail; //3/4/23 by DW" created="Sat, 04 Mar 2023 15:56:43 GMT"/>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;);  "/>
				<outline text="const electron = require (&quot;electron&quot;);"/>
				<outline text=""/>
				<outline text="var config = undefined;"/>
				<outline text="var prefs = {">
					<outline text="appPrefs: new Object (),"/>
					<outline text="myTabs: new Array (),"/>
					<outline text="ixCurrentTab: 0,"/>
					<outline text="ctPrefsSaves: 0,"/>
					<outline text="whenLastPrefsSave: undefined"/>
					<outline text="};"/>
					</outline>
				<outline text="var fnamePrefs = &quot;prefs.json&quot;;"/>
				<outline text="var flPrefsChanged = false;"/>
				<outline text=""/>
				<outline text="var appOptions = undefined; //callbacks provided by the app"/>
				<outline text=""/>
				<outline text="function openLinkInExternalWindow (url) { //10/24/17 by DW">
					<outline text="electron.shell.openExternal (url);"/>
					<outline text="}"/>
					</outline>
				<outline text="function openLinksInExternalWindow () {">
					<outline text="$(document).on (&quot;click&quot;, 'a[href^=&quot;http&quot;]', function (event) { ">
						<outline text="event.preventDefault ();"/>
						<outline text="electron.shell.openExternal (this.href);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setStatusMessage (s) {">
					<outline text="var visibility = &quot;visible&quot;;"/>
					<outline text="if (s.length == 0) {">
						<outline text="visibility = &quot;hidden&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;#idStatusMessageContainer&quot;).css (&quot;visibility&quot;, visibility);"/>
					<outline text="$(&quot;#idStatusMessage&quot;).html (s);"/>
					<outline text="}"/>
					</outline>
				<outline text="function shellGetConfig () { //4/21/17 by DW">
					<outline text="Changes" isComment="true">
						<outline text="4/21/17; 12:57:12 PM by DW">
							<outline text="Get a copy of the config struct from Node-Land."/>
							</outline>
						</outline>
					<outline text="var theConfig = JSON.parse (require (&quot;electron&quot;).ipcRenderer.sendSync (&quot;synchronous-message&quot;, &quot;getConfig&quot;)); "/>
					<outline text="return (theConfig);"/>
					<outline text="}"/>
					</outline>
				<outline text="function shellSetConfig (theConfigSubset) { //4/21/17 by DW">
					<outline text="Changes" isComment="true">
						<outline text="4/21/17; 12:57:12 PM by DW">
							<outline text="Send part of the config struct to Node-Land."/>
							</outline>
						</outline>
					<outline text="require (&quot;electron&quot;).ipcRenderer.send (&quot;asynch-message&quot;, &quot;setConfig&quot;, jsonStringify (theConfigSubset));  "/>
					<outline text="}"/>
					</outline>
				<outline text="function shellSetupSystemMenus () { ">
					<outline text="electron.remote.app.setName (config.productnameForDisplay); "/>
					<outline text="var template = [">
						<outline text="{ //Edit menu">
							<outline text="label: 'Edit',"/>
							<outline text="submenu: [">
								<outline text="{">
									<outline text="label: 'Undo',"/>
									<outline text="accelerator: 'CmdOrCtrl+Z',"/>
									<outline text="role: 'undo'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Redo',"/>
									<outline text="accelerator: 'Shift+CmdOrCtrl+Z',"/>
									<outline text="role: 'redo'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="type: 'separator'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Cut',"/>
									<outline text="accelerator: 'CmdOrCtrl+X',"/>
									<outline text="role: 'cut'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Copy',"/>
									<outline text="accelerator: 'CmdOrCtrl+C',"/>
									<outline text="role: 'copy'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Paste',"/>
									<outline text="accelerator: 'CmdOrCtrl+V',"/>
									<outline text="role: 'paste'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Select All',"/>
									<outline text="accelerator: 'CmdOrCtrl+A',"/>
									<outline text="role: 'selectall'"/>
									<outline text="},"/>
									</outline>
								<outline text="]"/>
								</outline>
							<outline text="},"/>
							</outline>
						<outline text="{ //Window menu">
							<outline text="label: 'Window',"/>
							<outline text="role: 'window',"/>
							<outline text="submenu: [">
								<outline text="{">
									<outline text="label: 'Minimize',"/>
									<outline text="accelerator: 'CmdOrCtrl+M',"/>
									<outline text="role: 'minimize'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Close',"/>
									<outline text="accelerator: 'CmdOrCtrl+W',"/>
									<outline text="role: 'close'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="type: 'separator'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Reload',"/>
									<outline text="accelerator: 'CmdOrCtrl+R',"/>
									<outline text="click: function(item, focusedWindow) {">
										<outline text="if (focusedWindow)">
											<outline text="focusedWindow.reload();"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'JavaScript console...',"/>
									<outline text="accelerator: (function() {">
										<outline text="if (process.platform == 'darwin')">
											<outline text="return 'Alt+Command+I';"/>
											</outline>
										<outline text="else">
											<outline text="return 'Ctrl+Shift+I';"/>
											</outline>
										<outline text="})(),"/>
										</outline>
									<outline text="click: function(item, focusedWindow) {">
										<outline text="if (focusedWindow)">
											<outline text="focusedWindow.toggleDevTools();"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="]"/>
								</outline>
							<outline text="},"/>
							</outline>
						<outline text="];"/>
						</outline>
					<outline text="if (process.platform == 'darwin') {">
						<outline text="const dialog = electron.remote.dialog;"/>
						<outline text="var aboutDialogOptions = {">
							<outline text="type: &quot;info&quot;,"/>
							<outline text="title: &quot;About Dialog&quot;,"/>
							<outline text="buttons: [&quot;OK&quot;],"/>
							<outline text="message: config.productnameForDisplay + &quot; v&quot; + config.version,"/>
							<outline text="detail: config.description"/>
							<outline text="};"/>
							</outline>
						<outline text="template.unshift ({">
							<outline text="label: config.productnameForDisplay,"/>
							<outline text="submenu: [">
								<outline text="{">
									<outline text="label: 'About ' + config.productnameForDisplay + &quot;...&quot;,"/>
									<outline text="click: function () {">
										<outline text="dialog.showMessageBox (aboutDialogOptions);"/>
										<outline text="}"/>
										</outline>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="type: 'separator'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Services',"/>
									<outline text="role: 'services',"/>
									<outline text="submenu: []"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="type: 'separator'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Hide ' + name,"/>
									<outline text="accelerator: 'Command+H',"/>
									<outline text="role: 'hide'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Hide Others',"/>
									<outline text="accelerator: 'Command+Alt+H',"/>
									<outline text="role: 'hideothers'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Show All',"/>
									<outline text="role: 'unhide'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="type: 'separator'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Quit',"/>
									<outline text="accelerator: 'Command+Q',"/>
									<outline text="click: function () {electron.remote.app.quit ();}"/>
									<outline text="},"/>
									</outline>
								<outline text="]"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="var theMenu = electron.remote.Menu.buildFromTemplate (template);"/>
					<outline text="electron.remote.Menu.setApplicationMenu (theMenu);"/>
					<outline text="}"/>
					</outline>
				<outline text="function shellSetupIpcHandlers () {">
					<outline text="console.log (&quot;setupIpcHandlers&quot;);"/>
					<outline text="const ipcRenderer = require (&quot;electron&quot;).ipcRenderer;"/>
					<outline text="ipcRenderer.on (&quot;debugMessage&quot;, function (event, s) {">
						<outline text="console.log (s + &quot; [main thread]&quot;);"/>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.send (&quot;asynch-message&quot;, &quot;hello&quot;);  //so the main thread knows how to call us"/>
					<outline text="ipcRenderer.on (&quot;callback&quot;, function (event, verb, param1) {">
						<outline text="console.log (&quot;callback: verb == &quot; + verb + &quot;, param1 == &quot; + param1);"/>
						<outline text="var package = JSON.parse (param1);"/>
						<outline text="switch (verb) {">
							<outline text="case &quot;consoleLog&quot;:">
								<outline text="console.log (package.text);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;msg&quot;:">
								<outline text="shellPrefs.msgs [package.path] = package.text;"/>
								<outline text="$(&quot;#idScriptMsg&quot;).text (jsonStringify (shellPrefs.msgs));"/>
								<outline text="prefsChanged ();"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;alertDialog&quot;:">
								<outline text="alertDialog (package.text);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;speakerBeep&quot;: //6/1/17 by DW">
								<outline text="console.log (&quot;callback: speakerBeep&quot;);"/>
								<outline text="speakerBeep ();"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;op&quot;: //6/12/17 by DW">
								<outline text="switch (package.verb) {">
									<outline text="case &quot;expand&quot;:">
										<outline text="opExpand (package.ctLevels);"/>
										<outline text="break;"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;electronland&quot;, function (event, name, value) { //8/5/17 by DW">
						<outline text=""/>
						<outline text="console.log (&quot;\nelectronland message received.\n&quot;);"/>
						<outline text=""/>
						<outline text="if (appOptions.ipcMessageCallback !== undefined) {">
							<outline text=""/>
							<outline text="console.log (&quot;\nelectronland about to call callback.\n&quot;);"/>
							<outline text=""/>
							<outline text="appOptions.ipcMessageCallback (name, value);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="ipcRenderer.on (&quot;config&quot;, function (event, jsontext) {" isComment="true">
						<outline text="console.log (&quot;shellSetupIpcHandlers, on config: jsontext == &quot; + jsontext);"/>
						<outline text="var configFromTheOtherSide = JSON.parse (jsontext);"/>
						<outline text="for (var x in configFromTheOtherSide) {">
							<outline text="appPrefs [x] = configFromTheOtherSide [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="shellConsts = JSON.parse (jsontext);" isComment="true"/>
						<outline text="shellReadPrefs ();" isComment="true"/>
						<outline text="" isComment="true"/>
						<outline text="if (shellConsts.flQuickScriptEditor) { //3/17/17 by DW" isComment="true">
							<outline text="$(&quot;#idScriptInterface&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="$(&quot;#idDataFolderDisplay&quot;).text (shellConsts.userDataFolder);" isComment="true"/>
						<outline text="$(&quot;#idVersionNumber&quot;).html (&quot;v&quot; + shellConsts.version);" isComment="true"/>
						<outline text="$(&quot;#idMenuProductName&quot;).html (shellConsts.productnameForDisplay);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;httpReturnVal&quot;, function (event, headers, val, callback) {" isComment="true">
						<outline text="console.log (&quot;httpReturnVal: val == &quot; + val);"/>
						<outline text="if (callback !== undefined) {">
							<outline text="callback (val);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;config&quot;, function (event, jsontext) {" isComment="true">
						<outline text="console.log (&quot;config: jsontext == &quot; + jsontext);"/>
						<outline text="shellConsts = JSON.parse (jsontext);"/>
						<outline text="shellReadPrefs ();"/>
						<outline text=""/>
						<outline text="if (shellConsts.flQuickScriptEditor) { //3/17/17 by DW">
							<outline text="$(&quot;#idScriptInterface&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="$(&quot;#idDataFolderDisplay&quot;).text (shellConsts.userDataFolder);" isComment="true"/>
						<outline text="$(&quot;#idVersionNumber&quot;).html (&quot;v&quot; + shellConsts.version);" isComment="true"/>
						<outline text="$(&quot;#idMenuProductName&quot;).html (shellConsts.productnameForDisplay);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;askDialog&quot;, function (event, prompt, defaultValue, placeholder, callback) {" isComment="true">
						<outline text="askDialog (prompt, defaultValue, placeholder, callback);"/>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;scriptReturnVal&quot;, function (event, val, errorMessage) {" isComment="true">
						<outline text="if (errorMessage !== undefined) {">
							<outline text="$(&quot;#idQuickScriptValue&quot;).html (errorMessage);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (val == null) {">
								<outline text="val = &quot;null&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="$(&quot;#idQuickScriptValue&quot;).html (val.toString ());"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function shellOpenUrl (url) {">
					<outline text="require (&quot;electron&quot;).ipcRenderer.send (&quot;asynch-message&quot;, &quot;openUrl&quot;, url);  "/>
					<outline text="}"/>
					</outline>
				<outline text="function shellOpenFolder (folder) {">
					<outline text="require (&quot;electron&quot;).ipcRenderer.send (&quot;asynch-message&quot;, &quot;openFolder&quot;, folder);  "/>
					<outline text="}"/>
					</outline>
				<outline text="function shellOpenItem (filepath) { //9/7/17 by DW">
					<outline text="require (&quot;electron&quot;).ipcRenderer.send (&quot;asynch-message&quot;, &quot;openItem&quot;, filepath);  "/>
					<outline text="}"/>
					</outline>
				<outline text="function shellOpenUserDataFolder () {">
					<outline text="shellOpenFolder (config.userDataFolder + &quot;config.json&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function shellOpenFileDialog (callback) {">
					<outline text="Changes" isComment="true">
						<outline text="1/31/20; 2:34:26 PM by DW">
							<outline text="They changed the API, it now returns a promise. Or I can use a synchronous version, which is what I'm doing. "/>
							</outline>
						</outline>
					<outline text="var options = {">
						<outline text="defaultPath: config.userDataFolder,"/>
						<outline text="properties: [&quot;createDirectory&quot;, &quot;openFile&quot;] //6/12/17 by DW"/>
						<outline text="};"/>
						</outline>
					<outline text="var theFiles = electron.remote.dialog.showOpenDialogSync (options);"/>
					<outline text="if (theFiles !== undefined) {">
						<outline text="console.log (&quot;shellOpenFileDialogSync: theFiles == &quot; + theFiles);"/>
						<outline text="if (callback !== undefined) {">
							<outline text="callback (theFiles);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="electron.remote.dialog.showOpenDialog (options, function (theFiles) {" isComment="true">
						<outline text="if (theFiles !== undefined) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (theFiles);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}); "/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function shellChooseFolderDialog (defaultFolder, callback) { //8/29/17 by DW">
					<outline text="Changes" isComment="true">
						<outline text="1/31/20; 2:34:26 PM by DW">
							<outline text="They changed the API, it now returns a promise. Or I can use a synchronous version, which is what I'm doing. "/>
							</outline>
						</outline>
					<outline text="var options = {">
						<outline text="defaultPath: defaultFolder,"/>
						<outline text="properties: [&quot;createDirectory&quot;, &quot;openDirectory&quot;] "/>
						<outline text="};"/>
						</outline>
					<outline text="var theFiles = electron.remote.dialog.showOpenDialogSync (options);"/>
					<outline text="if ((theFiles !== undefined) &amp;&amp; (theFiles.length &gt; 0)) {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback (theFiles [0] + &quot;/&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="electron.remote.dialog.showOpenDialog (options, function (theFiles) {" isComment="true">
						<outline text="if ((theFiles !== undefined) &amp;&amp; (theFiles.length &gt; 0)) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (theFiles [0] + &quot;/&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}); "/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function shellNewFileDialog (callback) {">
					<outline text="Changes" isComment="true">
						<outline text="1/31/20; 2:34:26 PM by DW">
							<outline text="They changed the API, it now returns a promise. Or I can use a synchronous version, which is what I'm doing. "/>
							</outline>
						</outline>
					<outline text="var options = {">
						<outline text="title: &quot;Name of the new file?&quot;,"/>
						<outline text="filters: [">
							<outline text="{name: 'text', extensions: config.acceptableFileExtensions}"/>
							<outline text="]"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="var f = electron.remote.dialog.showSaveDialogSync (options); //1/31/20 by DW"/>
					<outline text="if (f !== undefined) {">
						<outline text="console.log (&quot;shellNewFileDialogSync: f == &quot; + f);"/>
						<outline text="if (callback !== undefined) {">
							<outline text="callback (f);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="electron.remote.dialog.showSaveDialog (options, function (f) {" isComment="true">
						<outline text="if (f !== undefined) {">
							<outline text="var flHasLegalExtension = false;" isComment="true"/>
							<outline text="for (var i = 0; i &lt; config.acceptableFileExtensions.length; i++) {" isComment="true">
								<outline text="var ext = &quot;.&quot; + config.acceptableFileExtensions [i];"/>
								<outline text="if (endsWith (stringLower (f), ext)) {">
									<outline text="flHasLegalExtension = true;"/>
									<outline text="break;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (!flHasLegalExtension) {" isComment="true">
								<outline text="f += &quot;.&quot; + config.acceptableFileExtensions [0];"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (&quot;shellNewFileDialog: theFile == &quot; + f);"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (f);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}); "/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function shellHttpRequest (path, method, callback) { //call into the River5 server, running over in Node-Land" isComment="true">
					<outline text="Changes" isComment="true">
						<outline text="3/24/17; 11:37:47 AM by DW">
							<outline text="Makes the equivalent of an HTTP request into the River5 server, without using HTTP."/>
							</outline>
						</outline>
					<outline text="var electron = require (&quot;electron&quot;);"/>
					<outline text="if (method === undefined) {">
						<outline text="method = &quot;GET&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="electron.ipcRenderer.once (&quot;httpReturnVal&quot;, function (event, headers, val) {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback (val);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="electron.ipcRenderer.send (&quot;asynch-message&quot;, &quot;httpRequest&quot;, method, path);  "/>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sat, 04 Mar 2023 15:54:06 GMT"/>
				<outline text="function waitForConfirmingEmail () { //3/4/23 by DW" created="Sat, 04 Mar 2023 15:54:06 GMT">
					<outline text="return (require (&quot;electron&quot;).ipcRenderer.sendSync (&quot;synchronous-message&quot;, &quot;waitForOAuth&quot;));"/>
					<outline text="}" created="Sat, 04 Mar 2023 15:55:31 GMT"/>
					</outline>
				<outline text="" created="Sat, 04 Mar 2023 15:54:07 GMT"/>
				<outline text="function shellToggleTwitterConnect () {">
					<outline text="function waitForOAuth () {">
						<outline text="return (require (&quot;electron&quot;).ipcRenderer.sendSync (&quot;synchronous-message&quot;, &quot;waitForOAuth&quot;));"/>
						<outline text="}"/>
						</outline>
					<outline text="function specialConnect () {" created="Mon, 10 Jun 2013 18:07:32 GMT" pgfnum="25623">
						<outline text="var myPort = waitForOAuth (); //starts up the HTTP server waiting for a response"/>
						<outline text="var urlMyLocation = &quot;http://localhost:&quot; + myPort + &quot;/&quot;;"/>
						<outline text="console.log (&quot;\nspecialConnect: urlMyLocation == &quot; + urlMyLocation);"/>
						<outline text="var urlRedirectTo = config.urlTwitterServer + &quot;connect?redirect_url=&quot; + encodeURIComponent (urlMyLocation);" created="Mon, 28 Apr 2014 12:43:45 GMT" pgfnum="40579"/>
						<outline text="console.log (&quot;\nspecialConnect: urlRedirectTo == &quot; + urlRedirectTo);"/>
						<outline text="shell.openUrl (urlRedirectTo, false);" isComment="true"/>
						<outline text="window.location.href = urlRedirectTo;" created="Mon, 28 Apr 2014 12:43:28 GMT" pgfnum="40575"/>
						<outline text="}" created="Mon, 10 Jun 2013 18:19:49 GMT" pgfnum="25632"/>
						</outline>
					<outline text="if (twIsTwitterConnected ()) {" created="Thu, 13 Jun 2013 23:05:12 GMT" pgfnum="26117">
						<outline text="confirmDialog (&quot;Sign off Twitter?&quot;, function () {" created="Wed, 27 Feb 2013 16:18:09 GMT" pgfnum="19236">
							<outline text="twDisconnectFromTwitter ();" created="Mon, 28 Apr 2014 13:26:36 GMT" pgfnum="40601"/>
							<outline text="});" created="Sun, 14 Apr 2013 02:15:30 GMT" pgfnum="22673"/>
							</outline>
						<outline text="}" created="Thu, 13 Jun 2013 23:05:15 GMT" pgfnum="26118"/>
						</outline>
					<outline text="else {" created="Thu, 13 Jun 2013 23:05:16 GMT" pgfnum="26119">
						<outline text="specialConnect ();" created="Thu, 13 Jun 2013 23:05:41 GMT" pgfnum="26122"/>
						<outline text="}" created="Thu, 13 Jun 2013 23:05:19 GMT" pgfnum="26120"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function shellRunScript (theScript, callback) {">
					<outline text="var flRunScriptInBrowser = false; //an experiment"/>
					<outline text="if (flRunScriptInBrowser) {">
						<outline text="try {">
							<outline text="callback (eval (theScript));"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="callback (undefined, err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="var ipc = require (&quot;electron&quot;).ipcRenderer;"/>
						<outline text="if (callback !== undefined) {">
							<outline text="ipc.once (&quot;scriptReturnVal&quot;, function (event, val, errorMessage) {">
								<outline text="callback (val, errorMessage);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="ipc.send (&quot;asynch-message&quot;, &quot;runScript&quot;, theScript);  "/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="//settings dialog">
					<outline text="var saveSettingsCallback = undefined;"/>
					<outline text=""/>
					<outline text="function settingsGetValuesFromDialog (appPrefs) {">
						<outline text="var inputs = document.getElementById (&quot;idSettingsDialog&quot;).getElementsByTagName (&quot;input&quot;), i;" created="Fri, 04 Jan 2013 13:12:48 GMT" pgfnum="16622"/>
						<outline text="for (var i = 0; i &lt; inputs.length; i++) {">
							<outline text="if (inputs [i].type == &quot;checkbox&quot;) {" created="Fri, 11 Jan 2013 19:19:38 GMT" pgfnum="17047">
								<outline text="appPrefs [inputs [i].name] = inputs [i].checked;"/>
								<outline text="}" created="Fri, 11 Jan 2013 19:19:55 GMT" pgfnum="17050"/>
								</outline>
							<outline text="else {" created="Fri, 11 Jan 2013 19:19:56 GMT" pgfnum="17051">
								<outline text="appPrefs [inputs [i].name] = inputs [i].value;"/>
								<outline text="}" created="Fri, 11 Jan 2013 19:20:00 GMT" pgfnum="17052"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var textareas = document.getElementById (&quot;idSettingsDialog&quot;).getElementsByTagName (&quot;textarea&quot;), i;" created="Fri, 04 Jan 2013 13:12:48 GMT" pgfnum="16622"/>
						<outline text="for (var i = 0; i &lt; textareas.length; i++) {">
							<outline text="appPrefs [textareas [i].name] = textareas [i].value;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function settingsSetDefaultValues (appPrefs) {">
						<outline text="var inputs = document.getElementById (&quot;idSettingsDialog&quot;).getElementsByTagName (&quot;input&quot;), i;" created="Fri, 04 Jan 2013 13:12:48 GMT" pgfnum="16622"/>
						<outline text="for (var i = 0; i &lt; inputs.length; i++) {">
							<outline text="if (appPrefs [inputs [i].name] != undefined) {" created="Fri, 04 Jan 2013 15:35:01 GMT" pgfnum="16667">
								<outline text="inputs [i].value = appPrefs [inputs [i].name];" isComment="true"/>
								<outline text="if (inputs [i].type == &quot;checkbox&quot;) {" created="Sat, 19 Jan 2013 17:29:19 GMT" pgfnum="17413">
									<outline text="inputs [i].checked = appPrefs [inputs [i].name];" created="Sat, 19 Jan 2013 17:29:48 GMT" pgfnum="17417"/>
									<outline text="alert (inputs [i].name + &quot; is a checkbox. Its value is &quot; + inputs [i].checked);" isComment="true" created="Sun, 20 Jan 2013 23:33:08 GMT" pgfnum="17435"/>
									<outline text="}" created="Sat, 19 Jan 2013 17:30:56 GMT" pgfnum="17418"/>
									</outline>
								<outline text="else {" created="Sat, 19 Jan 2013 17:30:58 GMT" pgfnum="17419">
									<outline text="inputs [i].value = appPrefs [inputs [i].name];"/>
									<outline text="}" created="Sat, 19 Jan 2013 17:31:00 GMT" pgfnum="17420"/>
									</outline>
								<outline text="}" created="Fri, 04 Jan 2013 15:35:13 GMT" pgfnum="16668"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="" created="Fri, 04 Jan 2013 22:04:15 GMT" pgfnum="16695"/>
						<outline text="var textareas = document.getElementById (&quot;idSettingsDialog&quot;).getElementsByTagName (&quot;textarea&quot;), i;" created="Fri, 04 Jan 2013 13:12:48 GMT" pgfnum="16622"/>
						<outline text="for (var i = 0; i &lt; textareas.length; i++) {">
							<outline text="if (appPrefs [textareas [i].name] != undefined) {" created="Fri, 04 Jan 2013 15:35:01 GMT" pgfnum="16667">
								<outline text="textareas [i].value = appPrefs [textareas [i].name];"/>
								<outline text="}" created="Fri, 04 Jan 2013 15:35:13 GMT" pgfnum="16668"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function settingsCloseDialog (event) {">
						<outline text="Changes" isComment="true">
							<outline text="4/11/16; 5:03:56 PM by DW">
								<outline text="Add optional param, the event that caused the close. "/>
								</outline>
							</outline>
						<outline text="try { //6/7/14 by DW" created="Sat, 07 Jun 2014 12:55:57 GMT" pgfnum="41818">
							<outline text="concord.resumeListening (); //3/11/13 by DW" created="Mon, 11 Mar 2013 17:02:18 GMT" pgfnum="20149"/>
							<outline text="}" created="Sat, 07 Jun 2014 12:56:05 GMT" pgfnum="41821"/>
							</outline>
						<outline text="catch (err) {" created="Sat, 07 Jun 2014 12:56:06 GMT" pgfnum="41822">
							<outline text="}" created="Sat, 07 Jun 2014 12:56:11 GMT" pgfnum="41823"/>
							</outline>
						<outline text=""/>
						<outline text="if (event !== undefined) { //4/11/16 by DW">
							<outline text="event.stopPropagation ();"/>
							<outline text="}"/>
							</outline>
						<outline text="" created="Sat, 07 Jun 2014 12:52:09 GMT" pgfnum="41815"/>
						<outline text="$(&quot;#idSettingsDialog&quot;).modal ('hide'); "/>
						<outline text="};"/>
						</outline>
					<outline text="function settingsOkClicked () {">
						<outline text="settingsGetValuesFromDialog (prefs.appPrefs); "/>
						<outline text=""/>
						<outline text="settingsCloseDialog ();"/>
						<outline text="prefsChanged ();"/>
						<outline text=""/>
						<outline text="if (appOptions.applySettingsCallback !== undefined) {">
							<outline text="appOptions.applySettingsCallback (prefs.appPrefs);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (saveSettingsCallback !== undefined) {">
							<outline text="saveSettingsCallback (prefs.appPrefs);"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text=""/>
					<outline text="function shellOpenSettingsDialog (saveCallback) {">
						<outline text="saveSettingsCallback = saveCallback; "/>
						<outline text="" created="Sat, 07 Jun 2014 12:55:57 GMT" pgfnum="41817"/>
						<outline text="try { //6/7/14 by DW" created="Sat, 07 Jun 2014 12:55:57 GMT" pgfnum="41818">
							<outline text="concord.stopListening (); //3/11/13 by DW" created="Mon, 11 Mar 2013 17:02:18 GMT" pgfnum="20149"/>
							<outline text="}" created="Sat, 07 Jun 2014 12:56:05 GMT" pgfnum="41821"/>
							</outline>
						<outline text="catch (err) {" created="Sat, 07 Jun 2014 12:56:06 GMT" pgfnum="41822">
							<outline text="}" created="Sat, 07 Jun 2014 12:56:11 GMT" pgfnum="41823"/>
							</outline>
						<outline text="" created="Sat, 07 Jun 2014 12:55:57 GMT" pgfnum="41819"/>
						<outline text="$(&quot;#idSettingsDialog&quot;).modal ('show'); "/>
						<outline text="settingsSetDefaultValues (prefs.appPrefs); "/>
						<outline text=""/>
						<outline text="$(&quot;#idSettingsDialog&quot;).on (&quot;keydown&quot;, function (event) { //1/26/15 by DW">
							<outline text="if (event.which == 13) {" created="Wed, 09 Jan 2013 14:30:41 GMT" pgfnum="16921">
								<outline text="settingsOkClicked ();" created="Wed, 09 Jan 2013 16:03:12 GMT" pgfnum="16941"/>
								<outline text="return (false);" created="Wed, 06 Feb 2013 21:11:54 GMT" pgfnum="18314"/>
								<outline text="}" created="Wed, 09 Jan 2013 14:31:27 GMT" pgfnum="16924"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//prefs">
					<outline text="function getPrefs (callback) {">
						<outline text="var f = config.userDataFolder + fnamePrefs;"/>
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="for (var x in jstruct) {">
										<outline text="prefs [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;getPrefs: err.message == &quot; + err.message);"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function setPrefs (callback) {">
						<outline text="var f = config.userDataFolder + fnamePrefs;"/>
						<outline text="prefs.ctPrefsSaves++;"/>
						<outline text="prefs.whenLastPrefsSave = new Date ();"/>
						<outline text="fs.writeFile (f, jsonStringify (prefs), function (err) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="function shellGetPrefs (callback) {">
						<outline text="getPrefs (function () {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (prefs.appPrefs);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="var f = config.userDataFolder + fnamePrefs;" isComment="true"/>
						<outline text="fs.readFile (f, function (err, data) {" isComment="true">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback (JSON.parse (data.toString ()));"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;shellGetPrefs: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function shellSetPrefs (appPrefs) {">
						<outline text="for (var x in appPrefs) {">
							<outline text="prefs.appPrefs [x] = appPrefs [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="prefs.appPrefs = appPrefs;" isComment="true"/>
						<outline text="prefsChanged ();"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="function prefsChanged () {">
						<outline text="flPrefsChanged = true;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					</outline>
				<outline text="//tabs">
					<outline text="function addTab (tabtitle, tabfile) {">
						<outline text="var tab = {">
							<outline text="f: tabfile,"/>
							<outline text="title: tabtitle,"/>
							<outline text="flUpdateWaiting: false,"/>
							<outline text="flInstantOutline: false,"/>
							<outline text="flLocked: false,"/>
							<outline text="temp: new Object ()"/>
							<outline text="};"/>
							</outline>
						<outline text="var ixtab = prefs.myTabs.length;"/>
						<outline text="prefs.myTabs [ixtab] = tab;"/>
						<outline text="prefs.ixCurrentTab = ixtab;"/>
						<outline text="buildTabs ();"/>
						<outline text="updateLockIcon ();" isComment="true"/>
						<outline text="prefsChanged ();"/>
						<outline text="return (tab);"/>
						<outline text="}"/>
						</outline>
					<outline text="function addInstantTab (url, jstruct) {">
						<outline text="var tab = {">
							<outline text="title: jstruct.title,"/>
							<outline text="flInstantOutline: true,"/>
							<outline text="flLocked: false,"/>
							<outline text="urlOutline: url,"/>
							<outline text="urlOpmlFile: jstruct.url,"/>
							<outline text="description: jstruct.description,"/>
							<outline text="socketserver: jstruct.socketserver,"/>
							<outline text="temp: new Object ()"/>
							<outline text="};"/>
							</outline>
						<outline text="var flTabFound = false;"/>
						<outline text="if (tab.socketserver === &quot;undefined&quot;) {">
							<outline text="tab.socketserver = undefined;"/>
							<outline text="}"/>
							</outline>
						<outline text="var ixtab = prefs.myTabs.length;"/>
						<outline text="prefs.myTabs [ixtab] = tab;"/>
						<outline text="prefs.ixCurrentTab = ixtab;"/>
						<outline text="buildTabs ();"/>
						<outline text="updateLockIcon ();" isComment="true"/>
						<outline text="prefsChanged ();"/>
						<outline text="return (tab);"/>
						<outline text="}"/>
						</outline>
					<outline text="function showHideTabs () {">
						<outline text="var displayval = &quot;block&quot;;"/>
						<outline text="if (prefs.myTabs.length == 0) {">
							<outline text="displayval = &quot;none&quot;;"/>
							<outline text="$(&quot;#idEditorContainer&quot;).empty (); //5/5/17 by DW "/>
							<outline text="}"/>
							</outline>
						<outline text="$(&quot;#idTabsContainer&quot;).css (&quot;display&quot;, displayval);"/>
						<outline text="" isComment="true"/>
						<outline text="$(&quot;#idIcons&quot;).css (&quot;display&quot;, displayval); //7/6/16 by DW" isComment="true"/>
						<outline text="$(&quot;#idAttributesDisplay&quot;).css (&quot;display&quot;, (displayval != &quot;none&quot;) ? &quot;block&quot; : &quot;none&quot;); //7/7/16 by DW" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function buildTabs () {">
						<outline text="Changes" isComment="true">
							<outline text="1/30/20; 11:31:11 AM by DW">
								<outline text="Names of icons changed because we upgraded to Font-Awesome v5.12.0."/>
								</outline>
							</outline>
						<outline text="$(&quot;#idTabList&quot;).empty ();"/>
						<outline text="for (var i = 0; i &lt; prefs.myTabs.length; i++) {">
							<outline text="var tab = prefs.myTabs [i], activetab = &quot;&quot;, clickscript = &quot;shell.tabClick (&quot; + i + &quot;)&quot;, icon, title, updateWaitingClass = &quot;&quot;;"/>
							<outline text="if (i == prefs.ixCurrentTab) {">
								<outline text="activetab = &quot; class=\&quot;active\&quot;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (tab.flUpdateWaiting) {">
									<outline text="updateWaitingClass = &quot; iconUpdateWaiting &quot;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="//set icon">
								<outline text="if (tab.flInstantOutline) {">
									<outline text="icon = &quot;fas fa-bolt&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="icon = &quot;far fa-file-alt&quot;; //1/30/20 by DW"/>
									<outline text="icon = &quot;file-text-o&quot;;" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="icon = &quot;&lt;i class=\&quot;&quot; + icon + updateWaitingClass + &quot;\&quot;&gt;&lt;/i&gt;&quot;;"/>
								</outline>
							<outline text="//set title">
								<outline text="title = &quot;&lt;span class=\&quot;spTabTitleText\&quot;&gt;&quot; + tab.title + &quot;&lt;/span&gt;&quot;;"/>
								</outline>
							<outline text=""/>
							<outline text="$(&quot;#idTabList&quot;).append (&quot;&lt;li&quot; + activetab + &quot; id='tab&quot; + i + &quot;'&gt;&lt;a data-toggle=\&quot;tab\&quot; onclick='&quot; + clickscript + &quot;'&gt;&quot;  + icon + title + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="showHideTabs ();"/>
						<outline text="}"/>
						</outline>
					<outline text="function releaseWaitingUpdate (tab) {">
						<outline text="sendUpdateToTab (prefs.ixCurrentTab, tab.updateData);"/>
						<outline text="delete tab.updateData;"/>
						<outline text="tab.flUpdateWaiting = false;"/>
						<outline text="updateLockIcon ();"/>
						<outline text="}"/>
						</outline>
					<outline text="function tabClick (ix, callback) {">
						<outline text="if (ix &lt; prefs.myTabs.length) { //not out of range ">
							<outline text="var tab = prefs.myTabs [ix];"/>
							<outline text="prefs.ixCurrentTab = ix;"/>
							<outline text="if (tab.flUpdateWaiting) {">
								<outline text="if (!tab.flLocked) {">
									<outline text="releaseWaitingUpdate (tab);"/>
									<outline text="sendUpdateToTab (prefs.ixCurrentTab, tab.updateData);" isComment="true"/>
									<outline text="delete tab.updateData;" isComment="true"/>
									<outline text="tab.flUpdateWaiting = false;" isComment="true"/>
									<outline text="updateLockIcon ();" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="prefsChanged ();"/>
							<outline text="buildTabs ();"/>
							<outline text="updateLockIcon ();"/>
							<outline text="if (appOptions.tabClickCallback !== undefined) {">
								<outline text="appOptions.tabClickCallback (tab);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function closeTab (ixtab) {">
						<outline text="if (ixtab === undefined) {">
							<outline text="ixtab = prefs.ixCurrentTab;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (appOptions.tabCloseCallback !== undefined) {">
							<outline text="appOptions.tabCloseCallback (prefs.myTabs [ixtab]); //delete any attached objects"/>
							<outline text="}"/>
							</outline>
						<outline text="prefs.myTabs.splice (prefs.ixCurrentTab, 1);"/>
						<outline text="var ixmax = prefs.myTabs.length - 1;"/>
						<outline text="if (prefs.ixCurrentTab &gt; ixmax) {">
							<outline text="prefs.ixCurrentTab = ixmax;"/>
							<outline text="}"/>
							</outline>
						<outline text="buildTabs ();"/>
						<outline text="tabClick (prefs.ixCurrentTab);"/>
						<outline text="updateLockIcon ();"/>
						<outline text="prefsChanged ();"/>
						<outline text="}"/>
						</outline>
					<outline text="function getCurrentTab () {">
						<outline text="return (prefs.myTabs [prefs.ixCurrentTab]);"/>
						<outline text="}"/>
						</outline>
					<outline text="function sendUpdateToTab (ixtab, theData) {">
						<outline text="var tab = prefs.myTabs [ixtab];"/>
						<outline text="if ((ixtab == prefs.ixCurrentTab) &amp;&amp; (!tab.flLocked)) {">
							<outline text="if (appOptions.tabUpdatedCallback !== undefined) {">
								<outline text="appOptions.tabUpdatedCallback (tab, theData);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="tab.flUpdateWaiting = true;"/>
							<outline text="tab.updateData = theData;"/>
							<outline text="buildTabs ();"/>
							<outline text="updateLockIcon ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function wsWatchForChange (ixtab) {">
						<outline text="Changes" isComment="true">
							<outline text="4/28/17; 11:35:20 AM by DW">
								<outline text="Don't try to connect if tab.socketserver is undefined."/>
								</outline>
							</outline>
						<outline text="var tab = prefs.myTabs [ixtab];"/>
						<outline text="if (tab.myChatLogSocket === undefined) {">
							<outline text="if (tab.socketserver !== undefined) { //4/28/17 by DW">
								<outline text="console.log (&quot;wsWatchForChange: tab.socketserver == &quot; + tab.socketserver);"/>
								<outline text=""/>
								<outline text="var theSocket = new WebSocket (tab.socketserver); "/>
								<outline text="tab.myChatLogSocket = theSocket;"/>
								<outline text=""/>
								<outline text="theSocket.onopen = function (evt) {">
									<outline text="var msg = &quot;watch &quot; + tab.urlOpmlFile;"/>
									<outline text="console.log (&quot;sending: \&quot;&quot; + msg + &quot;\&quot;&quot;);"/>
									<outline text="theSocket.send (msg);"/>
									<outline text="};"/>
									</outline>
								<outline text="theSocket.onmessage = function (evt) {">
									<outline text="var s = evt.data;"/>
									<outline text="if (s !== undefined) { //no error">
										<outline text="var updatekey = &quot;update\r&quot;;"/>
										<outline text="if (beginsWith (s, updatekey)) { //it's an update">
											<outline text="var theData = stringDelete (s, 1, updatekey.length);"/>
											<outline text="console.log (&quot;wsWatchForChange: update received, theData.length == &quot; + theData.length);"/>
											<outline text="sendUpdateToTab (ixtab, theData);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="theSocket.onclose = function (evt) {">
									<outline text="console.log (&quot;tab.myChatLogSocket was closed.&quot;);"/>
									<outline text="tab.myChatLogSocket = undefined;"/>
									<outline text="};"/>
									</outline>
								<outline text="theSocket.onerror = function (evt) {">
									<outline text="console.log (&quot;tab.myChatLogSocket received an error&quot;);"/>
									<outline text="};"/>
									</outline>
								<outline text=""/>
								<outline text="console.log (&quot;wsWatchForChange: tab.myChatLogSocket == &quot; + jsonStringify (tab.myChatLogSocket));"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="function getTabsArray () { //so upper level can find out how many tabs there are, perhaps other info">
					<outline text="return (prefs.myTabs);"/>
					<outline text="}"/>
					</outline>
				<outline text="function updateLockIcon () {">
					<outline text="if (prefs.myTabs.length &gt; 0) {">
						<outline text="var tab = prefs.myTabs [prefs.ixCurrentTab];"/>
						<outline text="var enabledColor = &quot;gray&quot;, disabledColor = &quot;silver&quot;, updateWaitingColor = &quot;green&quot;;"/>
						<outline text=""/>
						<outline text="function enabled (id, fl) {">
							<outline text="var color = (fl) ? enabledColor : disabledColor"/>
							<outline text="$(&quot;#&quot; + id).css (&quot;color&quot;, color);"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="enabled (&quot;idLockIcon&quot;, tab.flInstantOutline);"/>
						<outline text=""/>
						<outline text="if (tab.flLocked) {">
							<outline text="classToRemove = &quot;fa-unlock&quot;, classToAdd = &quot;fa-lock&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="classToRemove = &quot;fa-lock&quot;, classToAdd = &quot;fa-unlock&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="$(&quot;#idLockIcon&quot;).removeClass (classToRemove);"/>
						<outline text="$(&quot;#idLockIcon&quot;).addClass (classToAdd);"/>
						<outline text=""/>
						<outline text="if (tab.flLocked &amp;&amp; tab.flUpdateWaiting) {">
							<outline text="$(&quot;#idLockIcon&quot;).css (&quot;color&quot;, updateWaitingColor);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function lockIconClick () {">
					<outline text="var tab = prefs.myTabs [prefs.ixCurrentTab];"/>
					<outline text="tab.flLocked = !tab.flLocked;"/>
					<outline text="if (!tab.flLocked) {">
						<outline text="releaseWaitingUpdate (tab);"/>
						<outline text="sendUpdateToTab (prefs.ixCurrentTab, tab.updateData);" isComment="true"/>
						<outline text="tab.flUpdateWaiting = false;" isComment="true"/>
						<outline text="delete tab.updateData;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="updateLockIcon ();"/>
					<outline text="prefsChanged ();"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function updateTwitterMenuItem () {" created="Thu, 13 Jun 2013 23:01:54 GMT" pgfnum="26111">
					<outline text="document.getElementById (&quot;idTwitterConnectMenuItem&quot;).innerHTML = (twIsTwitterConnected ()) ? &quot;Sign off Twitter...&quot; : &quot;Sign on Twitter...&quot;;" created="Thu, 13 Jun 2013 23:02:33 GMT" pgfnum="26114"/>
					<outline text="}" created="Thu, 13 Jun 2013 23:02:05 GMT" pgfnum="26112"/>
					</outline>
				<outline text="function updateTwitterUsername () {" created="Thu, 13 Jun 2013 23:01:54 GMT" pgfnum="26111">
					<outline text="document.getElementById (&quot;idTwitterUsername&quot;).innerHTML = (twIsTwitterConnected ()) ? localStorage.twScreenName : &quot;Sign on here&quot;;" created="Thu, 13 Jun 2013 23:02:33 GMT" pgfnum="26114"/>
					<outline text="}" created="Thu, 13 Jun 2013 23:02:05 GMT" pgfnum="26112"/>
					</outline>
				<outline text="function initMenus () {" created="Thu, 28 Mar 2013 21:12:24 GMT" pgfnum="21611">
					<outline text="var cmdKeyPrefix = getCmdKeyPrefix (); //10/6/14 by DW"/>
					<outline text="document.getElementById (&quot;idMenuProductName&quot;).innerHTML = config.productnameForDisplay; " created="Tue, 05 Feb 2013 01:08:38 GMT" pgfnum="18247"/>
					<outline text="document.getElementById (&quot;idMenuAboutProductName&quot;).innerHTML = config.productnameForDisplay; " created="Tue, 05 Feb 2013 01:08:38 GMT" pgfnum="18247"/>
					<outline text="$(&quot;#idMenubar .dropdown-menu li&quot;).each (function () {">
						<outline text="var li = $(this);"/>
						<outline text="var liContent = li.html ();"/>
						<outline text="liContent = liContent.replace (&quot;Cmd-&quot;, cmdKeyPrefix);"/>
						<outline text="li.html (liContent);"/>
						<outline text="});"/>
						</outline>
					<outline text="updateTwitterMenuItem ();" created="Thu, 13 Jun 2013 23:08:07 GMT" pgfnum="26123"/>
					<outline text="updateTwitterUsername ();"/>
					<outline text="}" created="Thu, 28 Mar 2013 21:12:30 GMT" pgfnum="21612"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (flPrefsChanged) {">
						<outline text="flPrefsChanged = false;"/>
						<outline text="setPrefs ();"/>
						<outline text="}"/>
						</outline>
					<outline text="for (var i = 0; i &lt; prefs.myTabs.length; i++) {">
						<outline text="var tab = prefs.myTabs [i];"/>
						<outline text="if (getBoolean (tab.flInstantOutline)) {">
							<outline text="wsWatchForChange (i);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function cleanPrefsAtStartup () {">
					<outline text="Changes" isComment="true">
						<outline text="5/5/17; 12:13:16 PM by DW">
							<outline text="When we start up, remove objects in prefs that need to be reset on each run. "/>
							</outline>
						</outline>
					<outline text="for (var i = 0; i &lt; prefs.myTabs.length; i++) { //values that don't persist betw invocations">
						<outline text="var tab = prefs.myTabs [i];"/>
						<outline text="tab.temp = new Object ();"/>
						<outline text="delete tab.myChatLogSocket;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function init (options, callback) {">
					<outline text="console.log (&quot;shell.init&quot;);"/>
					<outline text="config = shellGetConfig (); //set global, it's synchronous"/>
					<outline text="$(&quot;#idPageTitle&quot;).text (config.productnameForDisplay); //5/5/17 by DW"/>
					<outline text="$(&quot;#idVersionNumber&quot;).html (&quot;v&quot; + config.version); "/>
					<outline text="twStorageData.urlTwitterServer = config.urlTwitterServer;"/>
					<outline text="appOptions = options;"/>
					<outline text="var flHandleTabs = !getBoolean (appOptions.flDontHandleTabs); //5/24/21 by DW" created="Mon, 24 May 2021 17:29:09 GMT"/>
					<outline text="getPrefs (function () {">
						<outline text="if (flHandleTabs) {" created="Mon, 24 May 2021 17:29:41 GMT">
							<outline text="cleanPrefsAtStartup ();"/>
							<outline text="}" created="Mon, 24 May 2021 17:29:46 GMT"/>
							</outline>
						<outline text=""/>
						<outline text="console.log (&quot;shell.init: prefs == &quot; + jsonStringify (prefs)); //4/28/17 by DW"/>
						<outline text=""/>
						<outline text="shellSetupIpcHandlers ();"/>
						<outline text="shellSetupSystemMenus ();"/>
						<outline text="twGetOauthParams (false); "/>
						<outline text="" created="Mon, 24 May 2021 17:31:16 GMT"/>
						<outline text="if (flHandleTabs) {" created="Mon, 24 May 2021 17:29:41 GMT">
							<outline text="buildTabs ();" isComment="true"/>
							<outline text="tabClick (prefs.ixCurrentTab);"/>
							<outline text="}" created="Mon, 24 May 2021 17:29:46 GMT"/>
							</outline>
						<outline text=""/>
						<outline text="$(&quot;#idTwitterIcon&quot;).html (twStorageConsts.fontAwesomeIcon);"/>
						<outline text="initMenus ();"/>
						<outline text="updateLockIcon ();"/>
						<outline text=""/>
						<outline text="if (appOptions.applySettingsCallback !== undefined) {">
							<outline text="if (prefs.appPrefs !== undefined) {">
								<outline text="appOptions.applySettingsCallback (prefs.appPrefs);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="self.setInterval (everySecond, 1000); "/>
						<outline text=""/>
						<outline text="if (callback !== undefined) {">
							<outline text="callback (prefs.appPrefs);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="lib/electronshell.css">
				<outline text=".divPageBody {" isComment="true">
					<outline text="color: orange;"/>
					<outline text="}"/>
					</outline>
				<outline text="/* settings */">
					<outline text=".divSettingsDialog {">
						<outline text="font-family: Arial;"/>
						<outline text="font-size: 16px;"/>
						<outline text="line-height: 140%;" created="Thu, 03 Jan 2013 19:17:55 GMT" pgfnum="16596"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog p {">
						<outline text="font-family: Arial;"/>
						<outline text="font-size: 16px;"/>
						<outline text="line-height: 140%;" created="Thu, 03 Jan 2013 19:17:55 GMT" pgfnum="16596"/>
						<outline text="min-height: 10px;" created="Sun, 06 Jan 2013 16:48:41 GMT" pgfnum="16754"/>
						<outline text="margin-bottom: 1.3em;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog label { ">
						<outline text="display: inline;"/>
						<outline text="float: left;"/>
						<outline text="text-align: right;"/>
						<outline text="padding-top: 4px;"/>
						<outline text="width: 130px;"/>
						<outline text="margin-right: .5em;"/>
						<outline text="font-family: Arial;"/>
						<outline text="font-size: 16px;"/>
						<outline text="line-height: 140%;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog fieldset { /* 4/30/13 by DW */">
						<outline text="margin-left: 5px;" created="Tue, 30 Apr 2013 23:28:55 GMT" pgfnum="23390"/>
						<outline text="margin-right: 5px;" created="Tue, 30 Apr 2013 23:29:01 GMT" pgfnum="23391"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .clearfix { ">
						<outline text="margin-bottom: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .uneditable-input { ">
						<outline text="-moz-box-shadow: 0;"/>
						<outline text="border: none;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .divPrefsCheckbox { ">
						<outline text="margin-left: 140px;"/>
						<outline text="margin-top: -2px;" created="Thu, 03 Jan 2013 19:25:36 GMT" pgfnum="16597"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .divPrefsRadioList {">
						<outline text="margin-left: 140px;"/>
						<outline text="line-height: 200%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog h3 { ">
						<outline text="margin-top: 10px;"/>
						<outline text="margin-bottom: 6px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .divPrefsCheckbox input { ">
						<outline text="margin-top: 0;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog textarea { ">
						<outline text="width: 530px;"/>
						<outline text="height: auto;"/>
						<outline text="display: inline-block;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .row {">
						<outline text="line-height: 24px;"/>
						<outline text="margin-bottom: 12px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog red {">
						<outline text="color: red;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog h4 {">
						<outline text="font-size: 22px;"/>
						<outline text="padding-top: 15px;"/>
						<outline text="padding-bottom: 12px;  /* 4/12/12 DW -- increased from 5px */"/>
						<outline text="}"/>
						</outline>
					<outline text="" created="Tue, 01 Jan 2013 16:35:17 GMT" pgfnum="16546"/>
					<outline text=".divSettingsDialog .xlarge {" created="Tue, 01 Jan 2013 16:34:45 GMT" pgfnum="16543">
						<outline text="width: 530px;"/>
						<outline text="font-size: 16px;" created="Tue, 01 Jan 2013 16:39:50 GMT" pgfnum="16549"/>
						<outline text="height: auto;" created="Tue, 01 Jan 2013 16:35:06 GMT" pgfnum="16544"/>
						<outline text="}" created="Tue, 01 Jan 2013 16:35:10 GMT" pgfnum="16545"/>
						</outline>
					<outline text=".divSettingsDialog input {" created="Tue, 01 Jan 2013 16:46:46 GMT" pgfnum="16552">
						<outline text="margin-bottom: 0;" created="Tue, 01 Jan 2013 16:45:25 GMT" pgfnum="16551"/>
						<outline text="}" created="Tue, 01 Jan 2013 16:46:54 GMT" pgfnum="16554"/>
						</outline>
					<outline text="" created="Mon, 07 Jan 2013 14:57:15 GMT" pgfnum="16813"/>
					<outline text=".divSettingsDialog .nav { ">
						<outline text="margin-bottom: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divDialogElements input {">
						<outline text="font-size: 18px;"/>
						<outline text="padding: 3px; "/>
						<outline text="height: 32px; "/>
						<outline text="}"/>
						</outline>
					<outline text=".divDialogElements .xlarge {" created="Thu, 03 Jan 2013 22:51:02 GMT" pgfnum="16600">
						<outline text="width: 530px;"/>
						<outline text="font-size: 16px;" created="Tue, 01 Jan 2013 16:39:50 GMT" pgfnum="16549"/>
						<outline text="height: auto;" created="Tue, 01 Jan 2013 16:35:06 GMT" pgfnum="16544"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:51:18 GMT" pgfnum="16602"/>
						</outline>
					<outline text=".divDialogElements .numberPrefsInput {" created="Mon, 07 Jan 2013 15:04:18 GMT" pgfnum="16814">
						<outline text="width: 50px;" created="Mon, 07 Jan 2013 15:04:35 GMT" pgfnum="16815"/>
						<outline text="}" created="Mon, 07 Jan 2013 15:04:39 GMT" pgfnum="16816"/>
						</outline>
					<outline text=".divDialogElements textarea { ">
						<outline text="width: 530px;"/>
						<outline text="height: auto;"/>
						<outline text="display: inline-block;"/>
						<outline text="font-size: 16px;" created="Tue, 01 Jan 2013 16:39:50 GMT" pgfnum="16549"/>
						<outline text="}"/>
						</outline>
					<outline text=".divDialogElements input[type=&quot;checkbox&quot;] {" created="Thu, 03 Jan 2013 22:51:02 GMT" pgfnum="16600">
						<outline text="margin-right: 3px;"/>
						<outline text="margin-top: -1px;" created="Thu, 03 Jan 2013 22:54:27 GMT" pgfnum="16603"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:51:18 GMT" pgfnum="16602"/>
						</outline>
					<outline text=""/>
					<outline text=".nav-tabs &gt; li {" created="Thu, 03 Jan 2013 22:57:29 GMT" pgfnum="16604">
						<outline text="color: gray;" created="Thu, 03 Jan 2013 22:57:40 GMT" pgfnum="16605"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:57:49 GMT" pgfnum="16606"/>
						</outline>
					<outline text=".nav-tabs &gt; .active {" created="Thu, 03 Jan 2013 22:58:29 GMT" pgfnum="16607">
						<outline text="font-weight: bold;" created="Thu, 03 Jan 2013 22:58:48 GMT" pgfnum="16608"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:58:52 GMT" pgfnum="16609"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=".nav-tabs &gt; li &gt; a { /* 9/19/14 by DW -- they were interfering with the tabs in rivers, doesn't seem to be needed in menus */" isComment="true" created="Thu, 03 Jan 2013 22:57:29 GMT" pgfnum="16604">
						<outline text="font-size: 16px;" created="Thu, 03 Jan 2013 22:57:40 GMT" pgfnum="16605"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:57:49 GMT" pgfnum="16606"/>
						</outline>
					<outline text=".nav-tabs &gt; .active &gt; a { /* 9/19/14 by DW -- they were interfering with the tabs in rivers, doesn't seem to be needed in menus */" isComment="true" created="Thu, 03 Jan 2013 22:58:29 GMT" pgfnum="16607">
						<outline text="font-weight: bold;" created="Thu, 03 Jan 2013 22:58:48 GMT" pgfnum="16608"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:58:52 GMT" pgfnum="16609"/>
						</outline>
					<outline text=".divButton {">
						<outline text="padding-top: 12px;"/>
						<outline text="}" created="Wed, 28 Mar 2012 16:04:12 GMT" pgfnum="6929"/>
						</outline>
					<outline text=".divSettingsDialog .modal {" created="Tue, 01 Jan 2013 03:59:34 GMT" pgfnum="16538">
						<outline text="left: 40%;" created="Tue, 01 Jan 2013 03:59:57 GMT" pgfnum="16539"/>
						<outline text="width: 740px;" created="Tue, 01 Jan 2013 04:00:36 GMT" pgfnum="16541"/>
						<outline text="}" created="Tue, 01 Jan 2013 04:00:11 GMT" pgfnum="16540"/>
						</outline>
					<outline text=".divSettingsDialog .btn {" created="Wed, 26 Dec 2012 23:19:22 GMT" pgfnum="16391">
						<outline text="width: 80px;" created="Wed, 26 Dec 2012 23:19:34 GMT" pgfnum="16393"/>
						<outline text="margin-left: 5px;" created="Wed, 26 Dec 2012 23:22:19 GMT" pgfnum="16394"/>
						<outline text="}" created="Wed, 26 Dec 2012 23:19:31 GMT" pgfnum="16392"/>
						</outline>
					<outline text=".divSettingsDialog .ui-input-text, .divSettingsDialog .ui-checkbox { /* 4/11/13 by DW */">
						<outline text="display: inline-block;"/>
						<outline text="}"/>
						</outline>
					</outline>
				</outline>
			<outline text="examples/helloworld/hellomain.js">
				<outline text="const electronland = require (&quot;electronland&quot;).main; "/>
				<outline text=""/>
				<outline text="var myConfig = {">
					<outline text="productname: &quot;helloWorld&quot;," created="Sun, 06 Jan 2013 15:39:06 GMT" pgfnum="16734"/>
					<outline text="productnameForDisplay: &quot;Hello World&quot;," created="Sun, 06 Jan 2013 15:39:06 GMT" pgfnum="16734"/>
					<outline text="description: &quot;The Hello World app for electronLand.&quot;," created="Wed, 07 May 2014 12:04:38 GMT" pgfnum="41257"/>
					<outline text="version: &quot;0.4.0&quot;," created="Fri, 04 Jan 2013 22:12:08 GMT" pgfnum="16702"/>
					<outline text="indexfilename: &quot;index.html&quot;,"/>
					<outline text="mainWindowWidth: 800,"/>
					<outline text="mainWindowHeight: 600,"/>
					<outline text="appDirname: __dirname"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="electronland.init (myConfig, function () {">
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="examples/helloworld/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;helloWorld&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;hellomain.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;electronland&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/helloworld/homepage.js">
				<outline text="const shell = require (&quot;electronland&quot;).shell; "/>
				<outline text=""/>
				<outline text="function showHelloWorldMessage () {">
					<outline text="if (twIsTwitterConnected ()) {">
						<outline text="$(&quot;#idLoggedonMessage&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="$(&quot;#idNotLoggedonMessage&quot;).css (&quot;display&quot;, &quot;none&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="$(&quot;#idLoggedonMessage&quot;).css (&quot;display&quot;, &quot;none&quot;);"/>
						<outline text="$(&quot;#idNotLoggedonMessage&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="initTwitterMenuItems ();"/>
					<outline text="showHelloWorldMessage ();"/>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="var options = {">
						<outline text="};"/>
						</outline>
					<outline text="shell.init (options, function () {">
						<outline text="initTwitterMenuItems ();" isComment="true"/>
						<outline text="if (twIsTwitterConnected ()) {">
							<outline text="twGetUserInfo (twGetScreenName (), function (userinfo) {">
								<outline text="console.log (&quot;startup: userinfo == &quot; + jsonStringify (userinfo));"/>
								<outline text="$(&quot;#idUserName&quot;).text (userinfo.name);"/>
								<outline text="showHelloWorldMessage ();"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="self.setInterval (everySecond, 1000); "/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/helloworld/index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;Hello World&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; "/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="" created="Mon, 17 May 2021 14:50:59 GMT"/>
						<outline text="&lt;%basicIncludesForElectron%&gt; "/>
						<outline text="" created="Mon, 17 May 2021 14:51:01 GMT"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/storage/api.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;script src=&quot;homepage.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;style&gt;" created="Wed, 11 Sep 2013 14:27:45 GMT" pgfnum="30095">
							<outline text="body {">
								<outline text="font-family: &quot;Ubuntu&quot;;"/>
								<outline text="background-color: whitesmoke;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="font-size: 28px;"/>
								<outline text="line-height: 140%;"/>
								<outline text="width: 80%;"/>
								<outline text="margin-top: 90px;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divMessages {">
								<outline text="text-align: center;"/>
								<outline text="margin-top: 25%;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divVersionNumber {" isComment="true">
								<outline text="font-size: 12px;"/>
								<outline text="float: right;"/>
								<outline text="padding: 0;"/>
								<outline text="padding: 12px;" isComment="true"/>
								<outline text="display: none;" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text=".divVersionNumber {">
								<outline text="font-size: 12px;"/>
								<outline text="position: fixed;"/>
								<outline text="bottom: 0;"/>
								<outline text="right: 3;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divMenubar .container {">
								<outline text="width: 650px;"/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/style&gt;" created="Wed, 11 Sep 2013 14:30:17 GMT" pgfnum="30105"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divVersionNumber&quot; id=&quot;idVersionNumber&quot;&gt;&lt;/div&gt;"/>
						<outline text="&lt;div class=&quot;divMenubar&quot; id=&quot;idMenubar&quot;&gt;" created="Thu, 28 Mar 2013 21:39:05 GMT" pgfnum="21615">
							<outline text="&lt;div class=&quot;topbar-wrapper&quot;&gt;">
								<outline text="&lt;div class=&quot;navbar navbar-fixed-top&quot; data-dropdown=&quot;dropdown&quot;&gt;">
									<outline text="&lt;div class=&quot;navbar-inner&quot;&gt;">
										<outline text="&lt;div class=&quot;container&quot;&gt;">
											<outline text="&lt;a class=&quot;brand&quot; href=&quot;/&quot;&gt;&lt;span id=&quot;idMenuProductName&quot;&gt;&lt;/span&gt;&lt;/a&gt;"/>
											<outline text="&lt;ul class=&quot;nav&quot; id=&quot;idMainMenuList&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idFileMenu&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;File&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;newFileCommand ();&quot;&gt;New file...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;openFileCommand ();&quot;&gt;Open file...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;addTabCommand ();&quot;&gt;Add tab...&lt;/a&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;closeTabCommand ();&quot;&gt;Close&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;viewOutlineOpml ();&quot;&gt;View OPML...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;titleDescriptionDialog ();&quot;&gt;Set title &amp; description...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;editOpmlHeaders ();&quot;&gt;Edit OPML headers...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;runCursorScript ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-/&lt;/span&gt;Run Selection&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;makeOutlinePublic ();&quot;&gt;Make outline public...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;subscribeToInstantOutlineCommand ();&quot;&gt;Subscribe to outline...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;dropdown-submenu&quot;&gt;">
															<outline text="&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot;&gt;Special files...&lt;/a&gt;">
																<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;openMenubarOpml ()&quot;&gt;Menubar...&lt;/a&gt;&lt;/li&gt;"/>
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;openIconbarOpml ()&quot;&gt;Iconbar...&lt;/a&gt;&lt;/li&gt;"/>
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;openBookmarksOpml ()&quot;&gt;Bookmarks...&lt;/a&gt;&lt;/li&gt;"/>
																	</outline>
																<outline text="&lt;/ul&gt;"/>
																</outline>
															<outline text="&lt;/li&gt;"/>
															</outline>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;shell.openUserDataFolder ();&quot;&gt;Open data folder&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idOutlinerMenu&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Outliner&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opExpand ();&quot;&gt;Expand&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opExpandAllLevels ();&quot;&gt;Expand All Subs&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opExpandEverything ();&quot;&gt;Expand Everything&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opCollapse ();&quot;&gt;Collapse&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opCollapseEverything ();&quot;&gt;Collapse Everything&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opDeleteLine ();&quot;&gt;Delete Line&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;dropdown-submenu&quot;&gt;">
															<outline text="&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot;&gt;Build...&lt;/a&gt;">
																<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;buildListicle ()&quot;&gt;Listicle&lt;/a&gt;&lt;/li&gt;"/>
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;buildStatusCenter ()&quot;&gt;Status Center&lt;/a&gt;&lt;/li&gt;"/>
																	</outline>
																<outline text="&lt;/ul&gt;"/>
																</outline>
															<outline text="&lt;/li&gt;"/>
															</outline>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opFindCommand ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-F&lt;/span&gt;Find...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opFindAgainCommand ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-G&lt;/span&gt;Find again&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;toggleRenderMode ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-`&lt;/span&gt;&lt;span id=&quot;idRenderModeCommandString&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idReorgMenu&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Reorg&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (up, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-U&lt;/span&gt;Move Up&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (down, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-D&lt;/span&gt;Move Down&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (left, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-L&lt;/span&gt;Move Left&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (right, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-R&lt;/span&gt;Move Right&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="" created="Mon, 12 May 2014 23:20:46 GMT" pgfnum="41579"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;toggleArrowPad ();&quot;&gt;&lt;span id=&quot;idArrowPadCommandString&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opToggleComment ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-\&lt;/span&gt;Comment&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text="" created="Sat, 07 Sep 2013 16:56:40 GMT" pgfnum="29953"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opPromote ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-[&lt;/span&gt;Promote&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opDemote ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-]&lt;/span&gt;Demote&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;toggleRenderMode ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-`&lt;/span&gt;&lt;span id=&quot;idRenderModeCommandString&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idDocsMenu&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Docs&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;TBD&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown desktopOnly&quot; id=&quot;idBookmarksMenu&quot; style=&quot;display: none;&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Bookmarks&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot; id=&quot;idBookmarksList&quot;&gt;">
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;ul class=&quot;nav pull-right&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;&lt;span id=&quot;idTwitterIcon&quot;&gt;&lt;/span&gt;&lt;span id=&quot;idTwitterUsername&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;aboutDialog ();&quot;&gt;About &lt;span id=&quot;idMenuAboutProductName&quot;&gt;&lt;/span&gt;...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;openSettingsDialog ();&quot;&gt;Settings...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;shell.toggleTwitterConnect ();&quot; id=&quot;idTwitterConnectMenuItem&quot;&gt;&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;" created="Thu, 28 Mar 2013 21:39:17 GMT" pgfnum="21616"/>
							</outline>
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;div class=&quot;divMessages&quot;&gt;">
								<outline text="&lt;div id=&quot;idLoggedonMessage&quot; style=&quot;display: none;&quot;&gt;">
									<outline text="&lt;div class=&quot;divHello&quot;&gt;Hello &lt;span id=&quot;idUserName&quot;&gt;&lt;/span&gt;.&lt;/div&gt;"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div id=&quot;idNotLoggedonMessage&quot; style=&quot;display: none;&quot;&gt;">
									<outline text="Sign on to get a personalized greeting."/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="electronland.js">
				<outline text="exports.main = require (&quot;./lib/electronmain.js&quot;);"/>
				<outline text="exports.shell = require (&quot;./lib/electronshell.js&quot;);"/>
				</outline>
			<outline text="readme.md">
				<outline text="# electronLand">
					<outline text="My container for Electron apps that use nodeStorage for identity."/>
					<outline text="This is now a available as a &lt;a href=&quot;https://www.npmjs.com/package/electronland&quot;&gt;package&lt;/a&gt; on NPM and as a GitHub &lt;a href=&quot;https://github.com/scripting/electronland&quot;&gt;repository&lt;/a&gt;."/>
					<outline text="More docs forthcoming."/>
					<outline text="8/3/17 by DW"/>
					</outline>
				</outline>
			<outline text="config.json" isComment="true">
				<outline text="{">
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildElectronLandPackage ()"/>
			</outline>
		</body>
	</opml>
